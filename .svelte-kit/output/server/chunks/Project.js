import { c as create_ssr_component, f as add_attribute, e as escape, d as each, v as validate_component, b as subscribe, n as noop } from "./ssr.js";
import Dexie, { liveQuery } from "dexie";
import "downloadjs";
let db = new Dexie("DoItUps");
db.version(1).stores({
  projects: "++ID, Name, Duration, Serial",
  // tasks: '++ID, Name, Duration, Project_ID -> projects.ID, Task_ID, Done, Serial, Archived, Deferred, Current', // Primary key and indexed props
  tasks: "++ID, Name, Duration, Project_ID, Task_ID, Serial, Current, Archived, Deferred, Done"
  // Primary key and indexed props
});
function getList(table, conditions = {}, orders = {}) {
  return liveQuery(() => db[table].filter((item) => {
    return createFilters(item, conditions);
  }).toArray());
}
function createFilters(item, conditions = undefined = {}) {
  let keys = conditions ? Object.keys(conditions) : "";
  let flag = keys == "" ? true : keys.reduce((flag2, key) => {
    flag2 = flag2 && (Array.isArray(conditions[key]) ? item[key] in conditions[key] : item[key] == conditions[key]);
    conditions[key];
    return flag2;
  }, true);
  return flag;
}
const css$1 = {
  code: ".actions.svelte-er2k5x.svelte-er2k5x{visibility:hidden;position:absolute;bottom:90%;right:0px;border-radius:10px;border-bottom-right-radius:0}div.svelte-er2k5x:hover>.actions.svelte-er2k5x{visibility:visible}input[type=checkbox].svelte-er2k5x.svelte-er2k5x{width:16px;height:16px;transition:background 200ms ease-out 0s}input[type=checkbox].svelte-er2k5x.svelte-er2k5x:hover{background:whitesmoke}.task-title.svelte-er2k5x.svelte-er2k5x{min-height:32px;border:1px;padding:0 0.3rem}",
  map: `{"version":3,"file":"Task.svelte","sources":["Task.svelte"],"sourcesContent":["<script>\\r\\n    // import  presistentStore from \\"$libs/presistent-store\\";\\r\\n    // import SubTask from '../components/SubTask.svelte'\\r\\n    import { insert, update, remove } from \\"../lib/db\\"\\r\\n\\r\\n    export let data//, parent, updateTaskList, selectTask, selected\\r\\n    // let ctask, subtasks// = presistentStore(\\"sub-tasks\\", [], {dbName:\\"sub-tasks-\\" + data.ID, driver:\\"INDEXEDDB\\"})\\r\\n    let nameEl\\r\\n    $: if(nameEl && data.editing) edit(data.editing) //\\r\\n    function edit(flag){\\r\\n        // debugger\\r\\n        data.editing = flag\\r\\n        if(flag == false){\\r\\n            if(data.ID)\\r\\n                update('tasks', data)\\r\\n            else if(data.Name != ''){\\r\\n                insert('tasks', data)\\r\\n                data.Name = ''\\r\\n            }\\r\\n        }\\r\\n        else if(nameEl){\\r\\n            nameEl.focus()\\r\\n            // if(data.Name)\\r\\n                // nameEl.select()\\r\\n        }\\r\\n    }\\r\\n    function createTask(e){\\r\\n        e.stopPropagation()\\r\\n        // $subtasks = [...$subtasks, {ID:Date.now(), Name:'Task ' + ( $subtasks.length + 1 ), Description:'', tasks:[]}]\\r\\n    }\\r\\n    function removeTask(task){\\r\\n        remove('tasks', task.ID)\\r\\n    }\\r\\n    function archive(){\\r\\n        update('tasks', { ID:data.ID, Archived: data.Archived != true })\\r\\n    }\\r\\n    function defer(){\\r\\n        update('tasks', { ID:data.ID, Deferred: data.Deferred != true })\\r\\n    }\\r\\n    function current(){\\r\\n        update('tasks', { ID:data.ID, Current: data.Current != true })\\r\\n    }\\r\\n    function complete(){\\r\\n        update('tasks', { ID:data.ID, Done: data.Done != true })\\r\\n    }\\r\\n\\r\\n<\/script>\\r\\n<div>\\r\\n    <div class = \\"flex flex-col\\">\\r\\n        <div class = \\"flex gap-2 items-centers align-top\\">\\r\\n        {#if data.ID}<span><input class = \\"mt-2\\" type=\\"checkbox\\" bind:checked = {data.Done} on:click={complete}/></span>{/if}\\r\\n        {#if data.editing}\\r\\n                <input bind:this = {nameEl} type=\\"text\\" class = \\"task-title flex-grow\\" bind:value = {data.Name} on:blur = { (e)=>{ edit(false) }}\\r\\n                on:keypress={(e)=>{ e.keyCode == 13 && edit(false)}}/>\\r\\n            \\r\\n        {:else}\\r\\n            <div aria-hidden=\\"true\\" class:text-gray-400 = {data.Name == ''} class:text-red-500 = {data.Current} class = \\"task-title flex relative w-full hover:bg-blue-200 items-center\\" class:text-green-600 = {data.Done} on:click = {()=>edit(true)}>\\r\\n                {data.Name || 'add new task'}\\r\\n                {#if data.ID}<div class = \\"actions bg-blue-200 px-2 py-1 flex gap-3 ml-2 rounded\\">\\r\\n                    <button on:click|stopPropagation = {e=>removeTask(data)}>‚úñ</button>\\r\\n                    <button on:click|stopPropagation = {e=>archive(data)}>‚ö∞Ô∏è</button>\\r\\n                    <button on:click|stopPropagation = {e=>defer(data)}>üöß</button>\\r\\n                    <button on:click|stopPropagation = {e=>current(data)}>&#128339;</button>\\r\\n                </div>{/if}\\r\\n            </div>\\r\\n            <!-- <button on:click={createTask}>+</button> -->\\r\\n        {/if}\\r\\n        </div>\\r\\n        <!-- <ul class = \\"ml-3 w-full bg-green-200\\">\\r\\n            {#if subtasks}\\r\\n            {#each $subtasks as task}<li>\\r\\n                <svelte:self data = {task} parent = {data.ID} />\\r\\n            </li>{/each}\\r\\n            {/if}\\r\\n        </ul> -->\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n    .actions {visibility: hidden; position: absolute; bottom: 90%; right:0px; border-radius: 10px; border-bottom-right-radius: 0;}\\r\\n    div:hover > .actions {visibility: visible;}\\r\\n    input[type=checkbox] {width: 16px; height: 16px; transition: background 200ms ease-out 0s;}\\r\\n    input[type=checkbox]:hover {background: whitesmoke;}\\r\\n    .task-title { min-height:32px; border:1px; padding:0 0.3rem;}\\r\\n</style>"],"names":[],"mappings":"AA+EI,oCAAS,CAAC,UAAU,CAAE,MAAM,CAAE,QAAQ,CAAE,QAAQ,CAAE,MAAM,CAAE,GAAG,CAAE,MAAM,GAAG,CAAE,aAAa,CAAE,IAAI,CAAE,0BAA0B,CAAE,CAAE,CAC7H,iBAAG,MAAM,CAAG,sBAAS,CAAC,UAAU,CAAE,OAAQ,CAC1C,KAAK,CAAC,IAAI,CAAC,QAAQ,6BAAE,CAAC,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,UAAU,CAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAG,CAC1F,KAAK,CAAC,IAAI,CAAC,QAAQ,6BAAC,MAAO,CAAC,UAAU,CAAE,UAAW,CACnD,uCAAY,CAAE,WAAW,IAAI,CAAE,OAAO,GAAG,CAAE,QAAQ,CAAC,CAAC,MAAO"}`
};
const Task = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { data } = $$props;
  let nameEl;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
  $$result.css.add(css$1);
  return `<div><div class="flex flex-col"><div class="flex gap-2 items-centers align-top">${data.ID ? `<span><input class="mt-2 svelte-er2k5x" type="checkbox"${add_attribute("checked", data.Done, 1)}></span>` : ``} ${data.editing ? `<input type="text" class="task-title flex-grow svelte-er2k5x"${add_attribute("this", nameEl, 0)}${add_attribute("value", data.Name, 0)}>` : `<div aria-hidden="true" class="${[
    "task-title flex relative w-full hover:bg-blue-200 items-center svelte-er2k5x",
    (data.Name == "" ? "text-gray-400" : "") + " " + (data.Current ? "text-red-500" : "") + " " + (data.Done ? "text-green-600" : "")
  ].join(" ").trim()}">${escape(data.Name || "add new task")} ${data.ID ? `<div class="actions bg-blue-200 px-2 py-1 flex gap-3 ml-2 rounded svelte-er2k5x"><button data-svelte-h="svelte-3gn90i">‚úñ</button> <button data-svelte-h="svelte-lwsrlk">‚ö∞Ô∏è</button> <button data-svelte-h="svelte-jc6smr">üöß</button> <button data-svelte-h="svelte-9kalm0">üïì</button></div>` : ``}</div> `}</div> </div> </div>`;
});
const css = {
  code: ".svelte-152os6g:is(div, li)>button.svelte-152os6g{visibility:hidden}.svelte-152os6g:is(div, li):hover>button.svelte-152os6g{visibility:visible}span.svelte-152os6g.svelte-152os6g:empty{display:none}.remover.svelte-152os6g.svelte-152os6g{position:absolute;right:10px;top:0}.new-task.svelte-152os6g.svelte-152os6g:not(:focus-within){visibility:hidden}.task-list.svelte-152os6g:hover .new-task.svelte-152os6g{visibility:visible}",
  map: `{"version":3,"file":"Project.svelte","sources":["Project.svelte"],"sourcesContent":["<script>\\r\\n    // import  presistentStore from \\"$libs/presistent-store\\";\\r\\n    import Task from '../components/Task.svelte'\\r\\n    import { getList, insert, remove, update } from \\"../lib/db\\"\\r\\n\\r\\n    export let data, mini, conditions = {}, removeProject = '' //, updateProjectList, Name = 'Project', Description = '', Status = '', Date_Start = '', Date_End = '', Duration = 0\\r\\n    let nameEl, tasks\\r\\n    conditions['Project_ID'] = data.ID\\r\\n    tasks = getList('tasks', conditions)\\r\\n    // debugger\\r\\n    $: if(nameEl && data.editing) nameEl.focus()\\r\\n    function edit(flag){\\r\\n        data.editing = flag\\r\\n        if(flag == false){\\r\\n            update('projects', data)\\r\\n        }\\r\\n    }\\r\\n    // async function createTask(e){\\r\\n    //     e.stopPropagation()\\r\\n    //     await insert('tasks', {Name:'', Project_ID:data.ID, editing:true})\\r\\n    //     // let task = $tasks[$tasks.length - 1]\\r\\n    //     // if(task) task.editing = true\\r\\n    // }\\r\\n    \\r\\n<\/script>\\r\\n\\r\\n<div class = \\"flex flex-col gap-1 p-3 border-2 bg-blue-100 rounded-lg relative\\">\\r\\n    <div class = \\"w-full\\">\\r\\n        {#if data.editing}\\r\\n            <input bind:this = {nameEl} type=\\"text\\" class = \\"flex-grow bg-blue-200s p-2 w-full\\" bind:value = {data.Name} on:blur = {e=>edit(false)}\\r\\n                on:keypress = {e=>{e.keyCode == 13 && edit(false)}} />\\r\\n        {:else}\\r\\n            <div aria-hidden=\\"true\\" class = \\"p-1\\" on:click = {()=>edit(true)}>\\r\\n                <span class:text-xl = {!mini} class = \\"p-1\\">{data.Name} {($tasks || []).length}</span>\\r\\n                <!-- <button on:click={createTask}>+</button> -->\\r\\n            </div>\\r\\n        {/if}\\r\\n    </div>\\r\\n    {#if !mini}\\r\\n    <span>{data.Description || ''}</span>\\r\\n    <span>{data.Status || ''}</span>\\r\\n    <span>{data.Date_Start || ''}</span>\\r\\n    <span>{data.Date_End || ''}</span>\\r\\n    <ul class = \\"task-list p-1\\">\\r\\n        {#each $tasks || [] as task}<li>\\r\\n            <Task data = {task}/>\\r\\n        </li>{/each}\\r\\n        <li class = \\"new-task\\"><Task  data = {{Name:'', Project_ID:data.ID}}/></li>\\r\\n    </ul>\\r\\n    <button class = \\"remover\\" on:click={e=>{e.stopPropagation(); removeProject(data) }}>x</button>\\r\\n    {/if}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n    :is(div, li) > button {visibility: hidden;}\\r\\n    :is(div, li):hover > button {visibility: visible;}\\r\\n    span:empty {display: none;}\\r\\n    .remover {position: absolute; right: 10px; top: 0;}\\r\\n    .new-task:not(:focus-within) {visibility: hidden;}\\r\\n    .task-list:hover .new-task {visibility: visible;}\\r\\n</style>\\r\\n"],"names":[],"mappings":"eAsDI,IAAI,GAAG,EAAE,EAAE,CAAC,CAAG,qBAAO,CAAC,UAAU,CAAE,MAAO,gBAC1C,IAAI,GAAG,EAAE,EAAE,CAAC,MAAM,CAAG,qBAAO,CAAC,UAAU,CAAE,OAAQ,CACjD,kCAAI,MAAO,CAAC,OAAO,CAAE,IAAK,CAC1B,sCAAS,CAAC,QAAQ,CAAE,QAAQ,CAAE,KAAK,CAAE,IAAI,CAAE,GAAG,CAAE,CAAE,CAClD,uCAAS,KAAK,aAAa,CAAE,CAAC,UAAU,CAAE,MAAO,CACjD,yBAAU,MAAM,CAAC,wBAAU,CAAC,UAAU,CAAE,OAAQ"}`
};
const Project = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $tasks, $$unsubscribe_tasks = noop, $$subscribe_tasks = () => ($$unsubscribe_tasks(), $$unsubscribe_tasks = subscribe(tasks, ($$value) => $tasks = $$value), tasks);
  let { data, mini, conditions = {}, removeProject = "" } = $$props;
  let nameEl, tasks;
  conditions["Project_ID"] = data.ID;
  $$subscribe_tasks(tasks = getList("tasks", conditions));
  if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
  if ($$props.mini === void 0 && $$bindings.mini && mini !== void 0) $$bindings.mini(mini);
  if ($$props.conditions === void 0 && $$bindings.conditions && conditions !== void 0) $$bindings.conditions(conditions);
  if ($$props.removeProject === void 0 && $$bindings.removeProject && removeProject !== void 0) $$bindings.removeProject(removeProject);
  $$result.css.add(css);
  $$unsubscribe_tasks();
  return `<div class="flex flex-col gap-1 p-3 border-2 bg-blue-100 rounded-lg relative svelte-152os6g"><div class="w-full">${data.editing ? `<input type="text" class="flex-grow bg-blue-200s p-2 w-full"${add_attribute("this", nameEl, 0)}${add_attribute("value", data.Name, 0)}>` : `<div aria-hidden="true" class="p-1"><span class="${["p-1 svelte-152os6g", !mini ? "text-xl" : ""].join(" ").trim()}">${escape(data.Name)} ${escape(($tasks || []).length)}</span> </div>`}</div> ${!mini ? `<span class="svelte-152os6g">${escape(data.Description || "")}</span> <span class="svelte-152os6g">${escape(data.Status || "")}</span> <span class="svelte-152os6g">${escape(data.Date_Start || "")}</span> <span class="svelte-152os6g">${escape(data.Date_End || "")}</span> <ul class="task-list p-1 svelte-152os6g">${each($tasks || [], (task) => {
    return `<li>${validate_component(Task, "Task").$$render($$result, { data: task }, {}, {})} </li>`;
  })} <li class="new-task svelte-152os6g">${validate_component(Task, "Task").$$render($$result, { data: { Name: "", Project_ID: data.ID } }, {}, {})}</li></ul> <button class="remover svelte-152os6g" data-svelte-h="svelte-l8zd3a">x</button>` : ``} </div>`;
});
export {
  Project as P,
  db as d,
  getList as g
};
