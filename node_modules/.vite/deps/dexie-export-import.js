import {
  import_wrapper_default
} from "./chunk-67VQQZTV.js";
import "./chunk-EQCVQC35.js";

// node_modules/dexie-export-import/dist/dexie-export-import.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function getSchemaString(table) {
  var primKeyAndIndexes = [table.schema.primKey].concat(table.schema.indexes);
  return primKeyAndIndexes.map(function(index) {
    return index.src;
  }).join(",");
}
function extractDbSchema(exportedDb) {
  var schema = {};
  for (var _i = 0, _a = exportedDb.tables; _i < _a.length; _i++) {
    var table = _a[_i];
    schema[table.name] = table.schema;
  }
  return schema;
}
function readBlobAsync(blob, type) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onabort = function(ev) {
      return reject(new Error("file read aborted"));
    };
    reader.onerror = function(ev) {
      return reject(ev.target.error);
    };
    reader.onload = function(ev) {
      return resolve(ev.target.result);
    };
    if (type === "binary")
      reader.readAsArrayBuffer(blob);
    else
      reader.readAsText(blob);
  });
}
function readBlobSync(blob, type) {
  if (typeof FileReaderSync === "undefined") {
    throw new Error("FileReaderSync missing. Reading blobs synchronously requires code to run from within a web worker. Use TSON.encapsulateAsync() to do it from the main thread.");
  }
  var reader = new FileReaderSync();
  var data = type === "binary" ? reader.readAsArrayBuffer(blob) : reader.readAsText(blob);
  return data;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}
var typeson = createCommonjsModule(function(module, exports) {
  (function(global2, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
        return arr2;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }
    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    var TypesonPromise = function TypesonPromise2(f) {
      _classCallCheck(this, TypesonPromise2);
      this.p = new Promise(f);
    };
    TypesonPromise.__typeson__type__ = "TypesonPromise";
    if (typeof Symbol !== "undefined") {
      TypesonPromise.prototype[Symbol.toStringTag] = "TypesonPromise";
    }
    TypesonPromise.prototype.then = function(onFulfilled, onRejected) {
      var _this = this;
      return new TypesonPromise(function(typesonResolve, typesonReject) {
        _this.p.then(function(res) {
          typesonResolve(onFulfilled ? onFulfilled(res) : res);
        })["catch"](function(res) {
          return onRejected ? onRejected(res) : Promise.reject(res);
        }).then(typesonResolve, typesonReject);
      });
    };
    TypesonPromise.prototype["catch"] = function(onRejected) {
      return this.then(null, onRejected);
    };
    TypesonPromise.resolve = function(v) {
      return new TypesonPromise(function(typesonResolve) {
        typesonResolve(v);
      });
    };
    TypesonPromise.reject = function(v) {
      return new TypesonPromise(function(typesonResolve, typesonReject) {
        typesonReject(v);
      });
    };
    ["all", "race"].forEach(function(meth) {
      TypesonPromise[meth] = function(promArr) {
        return new TypesonPromise(function(typesonResolve, typesonReject) {
          Promise[meth](promArr.map(function(prom) {
            return prom && prom.constructor && prom.constructor.__typeson__type__ === "TypesonPromise" ? prom.p : prom;
          })).then(typesonResolve, typesonReject);
        });
      };
    });
    var _ref = {}, toStr = _ref.toString, hasOwn = {}.hasOwnProperty, getProto = Object.getPrototypeOf, fnToString = hasOwn.toString;
    function isThenable(v, catchCheck) {
      return isObject(v) && typeof v.then === "function" && (!catchCheck || typeof v["catch"] === "function");
    }
    function toStringTag(val) {
      return toStr.call(val).slice(8, -1);
    }
    function hasConstructorOf(a, b) {
      if (!a || _typeof(a) !== "object") {
        return false;
      }
      var proto = getProto(a);
      if (!proto) {
        return b === null;
      }
      var Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      if (typeof Ctor !== "function") {
        return b === null;
      }
      if (b === Ctor) {
        return true;
      }
      if (b !== null && fnToString.call(Ctor) === fnToString.call(b)) {
        return true;
      }
      if (typeof b === "function" && typeof Ctor.__typeson__type__ === "string" && Ctor.__typeson__type__ === b.__typeson__type__) {
        return true;
      }
      return false;
    }
    function isPlainObject(val) {
      if (!val || toStringTag(val) !== "Object") {
        return false;
      }
      var proto = getProto(val);
      if (!proto) {
        return true;
      }
      return hasConstructorOf(val, Object);
    }
    function isUserObject(val) {
      if (!val || toStringTag(val) !== "Object") {
        return false;
      }
      var proto = getProto(val);
      if (!proto) {
        return true;
      }
      return hasConstructorOf(val, Object) || isUserObject(proto);
    }
    function isObject(v) {
      return v && _typeof(v) === "object";
    }
    function escapeKeyPathComponent(keyPathComponent) {
      return keyPathComponent.replace(/~/g, "~0").replace(/\./g, "~1");
    }
    function unescapeKeyPathComponent(keyPathComponent) {
      return keyPathComponent.replace(/~1/g, ".").replace(/~0/g, "~");
    }
    function getByKeyPath(obj, keyPath) {
      if (keyPath === "") {
        return obj;
      }
      var period = keyPath.indexOf(".");
      if (period > -1) {
        var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
        return innerObj === void 0 ? void 0 : getByKeyPath(innerObj, keyPath.slice(period + 1));
      }
      return obj[unescapeKeyPathComponent(keyPath)];
    }
    function setAtKeyPath(obj, keyPath, value) {
      if (keyPath === "") {
        return value;
      }
      var period = keyPath.indexOf(".");
      if (period > -1) {
        var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
        return setAtKeyPath(innerObj, keyPath.slice(period + 1), value);
      }
      obj[unescapeKeyPathComponent(keyPath)] = value;
      return obj;
    }
    function getJSONType(value) {
      return value === null ? "null" : Array.isArray(value) ? "array" : _typeof(value);
    }
    var keys = Object.keys, isArray = Array.isArray, hasOwn$1 = {}.hasOwnProperty, internalStateObjPropsToIgnore = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
    function nestedPathsFirst(a, b) {
      if (a.keypath === "") {
        return -1;
      }
      var as = a.keypath.match(/\./g) || 0;
      var bs = b.keypath.match(/\./g) || 0;
      if (as) {
        as = as.length;
      }
      if (bs) {
        bs = bs.length;
      }
      return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;
    }
    var Typeson = function() {
      function Typeson2(options) {
        _classCallCheck(this, Typeson2);
        this.options = options;
        this.plainObjectReplacers = [];
        this.nonplainObjectReplacers = [];
        this.revivers = {};
        this.types = {};
      }
      _createClass(Typeson2, [{
        key: "stringify",
        value: function stringify(obj, replacer, space, opts) {
          opts = _objectSpread2({}, this.options, {}, opts, {
            stringification: true
          });
          var encapsulated = this.encapsulate(obj, null, opts);
          if (isArray(encapsulated)) {
            return JSON.stringify(encapsulated[0], replacer, space);
          }
          return encapsulated.then(function(res) {
            return JSON.stringify(res, replacer, space);
          });
        }
        /**
         * Also sync but throws on non-sync result.
         * @param {Any} obj
         * @param {JSONReplacer|string[]} replacer
         * @param {number|string} space
         * @param {object} opts
         * @returns {string}
         */
      }, {
        key: "stringifySync",
        value: function stringifySync(obj, replacer, space, opts) {
          return this.stringify(obj, replacer, space, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: true
          }));
        }
        /**
         *
         * @param {Any} obj
         * @param {JSONReplacer|string[]} replacer
         * @param {number|string} space
         * @param {object} opts
         * @returns {Promise<string>}
         */
      }, {
        key: "stringifyAsync",
        value: function stringifyAsync(obj, replacer, space, opts) {
          return this.stringify(obj, replacer, space, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: false
          }));
        }
        /**
         * Parse Typeson back into an obejct.
         * Initial arguments works identical to those of `JSON.parse()`.
         * @param {string} text
         * @param {function} reviver This JSON reviver has nothing to do with
         *   our revivers.
         * @param {object} opts
         * @returns {external:JSON}
         */
      }, {
        key: "parse",
        value: function parse(text, reviver, opts) {
          opts = _objectSpread2({}, this.options, {}, opts, {
            parse: true
          });
          return this.revive(JSON.parse(text, reviver), opts);
        }
        /**
        * Also sync but throws on non-sync result.
        * @param {string} text
        * @param {function} reviver This JSON reviver has nothing to do with
        *   our revivers.
        * @param {object} opts
        * @returns {external:JSON}
        */
      }, {
        key: "parseSync",
        value: function parseSync(text, reviver, opts) {
          return this.parse(text, reviver, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: true
          }));
        }
        /**
        * @param {string} text
        * @param {function} reviver This JSON reviver has nothing to do with
        *   our revivers.
        * @param {object} opts
        * @returns {Promise} Resolves to `external:JSON`
        */
      }, {
        key: "parseAsync",
        value: function parseAsync(text, reviver, opts) {
          return this.parse(text, reviver, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: false
          }));
        }
        /**
         *
         * @param {Any} obj
         * @param {object} stateObj
         * @param {object} [opts={}]
         * @returns {string[]|false}
         */
      }, {
        key: "specialTypeNames",
        value: function specialTypeNames(obj, stateObj) {
          var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          opts.returnTypeNames = true;
          return this.encapsulate(obj, stateObj, opts);
        }
        /**
         *
         * @param {Any} obj
         * @param {PlainObject} stateObj
         * @param {PlainObject} [opts={}]
         * @returns {Promise|GenericArray|PlainObject|string|false}
         */
      }, {
        key: "rootTypeName",
        value: function rootTypeName(obj, stateObj) {
          var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          opts.iterateNone = true;
          return this.encapsulate(obj, stateObj, opts);
        }
        /**
         * Encapsulate a complex object into a plain Object by replacing
         * registered types with plain objects representing the types data.
         *
         * This method is used internally by `Typeson.stringify()`.
         * @param {Any} obj - Object to encapsulate.
         * @param {PlainObject} stateObj
         * @param {PlainObject} opts
         * @returns {Promise|GenericArray|PlainObject|string|false}
         */
      }, {
        key: "encapsulate",
        value: function encapsulate(obj, stateObj, opts) {
          opts = _objectSpread2({
            sync: true
          }, this.options, {}, opts);
          var _opts = opts, sync = _opts.sync;
          var that = this, types = {}, refObjs = [], refKeys = [], promisesDataRoot = [];
          var cyclic = "cyclic" in opts ? opts.cyclic : true;
          var _opts2 = opts, encapsulateObserver = _opts2.encapsulateObserver;
          var ret = _encapsulate("", obj, cyclic, stateObj || {}, promisesDataRoot);
          function finish(ret2) {
            var typeNames = Object.values(types);
            if (opts.iterateNone) {
              if (typeNames.length) {
                return typeNames[0];
              }
              return Typeson2.getJSONType(ret2);
            }
            if (typeNames.length) {
              if (opts.returnTypeNames) {
                return _toConsumableArray(new Set(typeNames));
              }
              if (!ret2 || !isPlainObject(ret2) || // Also need to handle if this is an object with its
              //   own `$types` property (to avoid ambiguity)
              hasOwn$1.call(ret2, "$types")) {
                ret2 = {
                  $: ret2,
                  $types: {
                    $: types
                  }
                };
              } else {
                ret2.$types = types;
              }
            } else if (isObject(ret2) && hasOwn$1.call(ret2, "$types")) {
              ret2 = {
                $: ret2,
                $types: true
              };
            }
            if (opts.returnTypeNames) {
              return false;
            }
            return ret2;
          }
          function checkPromises(_x, _x2) {
            return _checkPromises.apply(this, arguments);
          }
          function _checkPromises() {
            _checkPromises = _asyncToGenerator(
              regeneratorRuntime.mark(function _callee2(ret2, promisesData) {
                var promResults;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return Promise.all(promisesData.map(function(pd) {
                          return pd[1].p;
                        }));
                      case 2:
                        promResults = _context2.sent;
                        _context2.next = 5;
                        return Promise.all(promResults.map(
                          function() {
                            var _ref2 = _asyncToGenerator(
                              regeneratorRuntime.mark(function _callee(promResult) {
                                var newPromisesData, _promisesData$splice, _promisesData$splice2, prData, _prData, keyPath, cyclic2, stateObj2, parentObj, key, detectedType, encaps, isTypesonPromise, encaps2;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                  while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        newPromisesData = [];
                                        _promisesData$splice = promisesData.splice(0, 1), _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1), prData = _promisesData$splice2[0];
                                        _prData = _slicedToArray(prData, 7), keyPath = _prData[0], cyclic2 = _prData[2], stateObj2 = _prData[3], parentObj = _prData[4], key = _prData[5], detectedType = _prData[6];
                                        encaps = _encapsulate(keyPath, promResult, cyclic2, stateObj2, newPromisesData, true, detectedType);
                                        isTypesonPromise = hasConstructorOf(encaps, TypesonPromise);
                                        if (!(keyPath && isTypesonPromise)) {
                                          _context.next = 11;
                                          break;
                                        }
                                        _context.next = 8;
                                        return encaps.p;
                                      case 8:
                                        encaps2 = _context.sent;
                                        parentObj[key] = encaps2;
                                        return _context.abrupt("return", checkPromises(ret2, newPromisesData));
                                      case 11:
                                        if (keyPath) {
                                          parentObj[key] = encaps;
                                        } else if (isTypesonPromise) {
                                          ret2 = encaps.p;
                                        } else {
                                          ret2 = encaps;
                                        }
                                        return _context.abrupt("return", checkPromises(ret2, newPromisesData));
                                      case 13:
                                      case "end":
                                        return _context.stop();
                                    }
                                  }
                                }, _callee);
                              })
                            );
                            return function(_x3) {
                              return _ref2.apply(this, arguments);
                            };
                          }()
                        ));
                      case 5:
                        return _context2.abrupt("return", ret2);
                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })
            );
            return _checkPromises.apply(this, arguments);
          }
          function _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, cb) {
            Object.assign(stateObj2, ownKeysObj);
            var vals = internalStateObjPropsToIgnore.map(function(prop) {
              var tmp = stateObj2[prop];
              delete stateObj2[prop];
              return tmp;
            });
            cb();
            internalStateObjPropsToIgnore.forEach(function(prop, i) {
              stateObj2[prop] = vals[i];
            });
          }
          function _encapsulate(keypath, value, cyclic2, stateObj2, promisesData, resolvingTypesonPromise, detectedType) {
            var ret2;
            var observerData = {};
            var $typeof = _typeof(value);
            var runObserver = encapsulateObserver ? function(obj2) {
              var type = detectedType || stateObj2.type || Typeson2.getJSONType(value);
              encapsulateObserver(Object.assign(obj2 || observerData, {
                keypath,
                value,
                cyclic: cyclic2,
                stateObj: stateObj2,
                promisesData,
                resolvingTypesonPromise,
                awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)
              }, {
                type
              }));
            } : null;
            if (["string", "boolean", "number", "undefined"].includes($typeof)) {
              if (value === void 0 || $typeof === "number" && (isNaN(value) || value === -Infinity || value === Infinity)) {
                if (stateObj2.replaced) {
                  ret2 = value;
                } else {
                  ret2 = replace(keypath, value, stateObj2, promisesData, false, resolvingTypesonPromise, runObserver);
                }
                if (ret2 !== value) {
                  observerData = {
                    replaced: ret2
                  };
                }
              } else {
                ret2 = value;
              }
              if (runObserver) {
                runObserver();
              }
              return ret2;
            }
            if (value === null) {
              if (runObserver) {
                runObserver();
              }
              return value;
            }
            if (cyclic2 && !stateObj2.iterateIn && !stateObj2.iterateUnsetNumeric && value && _typeof(value) === "object") {
              var refIndex = refObjs.indexOf(value);
              if (refIndex < 0) {
                if (cyclic2 === true) {
                  refObjs.push(value);
                  refKeys.push(keypath);
                }
              } else {
                types[keypath] = "#";
                if (runObserver) {
                  runObserver({
                    cyclicKeypath: refKeys[refIndex]
                  });
                }
                return "#" + refKeys[refIndex];
              }
            }
            var isPlainObj = isPlainObject(value);
            var isArr = isArray(value);
            var replaced = (
              // Running replace will cause infinite loop as will test
              //   positive again
              (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj2.replaced) || stateObj2.iterateIn ? (
                // Optimization: if plain object and no plain-object
                //   replacers, don't try finding a replacer
                value
              ) : replace(keypath, value, stateObj2, promisesData, isPlainObj || isArr, null, runObserver)
            );
            var clone;
            if (replaced !== value) {
              ret2 = replaced;
              observerData = {
                replaced
              };
            } else {
              if (keypath === "" && hasConstructorOf(value, TypesonPromise)) {
                promisesData.push([keypath, value, cyclic2, stateObj2, void 0, void 0, stateObj2.type]);
                ret2 = value;
              } else if (isArr && stateObj2.iterateIn !== "object" || stateObj2.iterateIn === "array") {
                clone = new Array(value.length);
                observerData = {
                  clone
                };
              } else if (!["function", "symbol"].includes(_typeof(value)) && !("toJSON" in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj2.iterateIn === "object") {
                clone = {};
                if (stateObj2.addLength) {
                  clone.length = value.length;
                }
                observerData = {
                  clone
                };
              } else {
                ret2 = value;
              }
            }
            if (runObserver) {
              runObserver();
            }
            if (opts.iterateNone) {
              return clone || ret2;
            }
            if (!clone) {
              return ret2;
            }
            if (stateObj2.iterateIn) {
              var _loop = function _loop3(key2) {
                var ownKeysObj = {
                  ownKeys: hasOwn$1.call(value, key2)
                };
                _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                  var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key2);
                  var val = _encapsulate(kp, value[key2], Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                  if (hasConstructorOf(val, TypesonPromise)) {
                    promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone, key2, stateObj2.type]);
                  } else if (val !== void 0) {
                    clone[key2] = val;
                  }
                });
              };
              for (var key in value) {
                _loop(key);
              }
              if (runObserver) {
                runObserver({
                  endIterateIn: true,
                  end: true
                });
              }
            } else {
              keys(value).forEach(function(key2) {
                var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key2);
                var ownKeysObj = {
                  ownKeys: true
                };
                _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                  var val = _encapsulate(kp, value[key2], Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                  if (hasConstructorOf(val, TypesonPromise)) {
                    promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone, key2, stateObj2.type]);
                  } else if (val !== void 0) {
                    clone[key2] = val;
                  }
                });
              });
              if (runObserver) {
                runObserver({
                  endIterateOwn: true,
                  end: true
                });
              }
            }
            if (stateObj2.iterateUnsetNumeric) {
              var vl = value.length;
              var _loop2 = function _loop22(i2) {
                if (!(i2 in value)) {
                  var kp = keypath + (keypath ? "." : "") + i2;
                  var ownKeysObj = {
                    ownKeys: false
                  };
                  _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                    var val = _encapsulate(kp, void 0, Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                    if (hasConstructorOf(val, TypesonPromise)) {
                      promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone, i2, stateObj2.type]);
                    } else if (val !== void 0) {
                      clone[i2] = val;
                    }
                  });
                }
              };
              for (var i = 0; i < vl; i++) {
                _loop2(i);
              }
              if (runObserver) {
                runObserver({
                  endIterateUnsetNumeric: true,
                  end: true
                });
              }
            }
            return clone;
          }
          function replace(keypath, value, stateObj2, promisesData, plainObject, resolvingTypesonPromise, runObserver) {
            var replacers = plainObject ? that.plainObjectReplacers : that.nonplainObjectReplacers;
            var i = replacers.length;
            while (i--) {
              var replacer = replacers[i];
              if (replacer.test(value, stateObj2)) {
                var type = replacer.type;
                if (that.revivers[type]) {
                  var existing = types[keypath];
                  types[keypath] = existing ? [type].concat(existing) : type;
                }
                Object.assign(stateObj2, {
                  type,
                  replaced: true
                });
                if ((sync || !replacer.replaceAsync) && !replacer.replace) {
                  if (runObserver) {
                    runObserver({
                      typeDetected: true
                    });
                  }
                  return _encapsulate(keypath, value, cyclic && "readonly", stateObj2, promisesData, resolvingTypesonPromise, type);
                }
                if (runObserver) {
                  runObserver({
                    replacing: true
                  });
                }
                var replaceMethod = sync || !replacer.replaceAsync ? "replace" : "replaceAsync";
                return _encapsulate(keypath, replacer[replaceMethod](value, stateObj2), cyclic && "readonly", stateObj2, promisesData, resolvingTypesonPromise, type);
              }
            }
            return value;
          }
          return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function() {
            throw new TypeError("Sync method requested but async result obtained");
          }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function() {
            throw new TypeError("Async method requested but sync result obtained");
          }() : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));
        }
        /**
         * Also sync but throws on non-sync result.
         * @param {*} obj
         * @param {object} stateObj
         * @param {object} opts
         * @returns {*}
         */
      }, {
        key: "encapsulateSync",
        value: function encapsulateSync(obj, stateObj, opts) {
          return this.encapsulate(obj, stateObj, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: true
          }));
        }
        /**
         * @param {*} obj
         * @param {object} stateObj
         * @param {object} opts
         * @returns {*}
         */
      }, {
        key: "encapsulateAsync",
        value: function encapsulateAsync(obj, stateObj, opts) {
          return this.encapsulate(obj, stateObj, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: false
          }));
        }
        /**
         * Revive an encapsulated object.
         * This method is used internally by `Typeson.parse()`.
         * @param {object} obj - Object to revive. If it has `$types` member, the
         *   properties that are listed there will be replaced with its true type
         *   instead of just plain objects.
         * @param {object} opts
         * @throws TypeError If mismatch between sync/async type and result
         * @returns {Promise|*} If async, returns a Promise that resolves to `*`
         */
      }, {
        key: "revive",
        value: function revive(obj, opts) {
          var types = obj && obj.$types;
          if (!types) {
            return obj;
          }
          if (types === true) {
            return obj.$;
          }
          opts = _objectSpread2({
            sync: true
          }, this.options, {}, opts);
          var _opts3 = opts, sync = _opts3.sync;
          var keyPathResolutions = [];
          var stateObj = {};
          var ignore$Types = true;
          if (types.$ && isPlainObject(types.$)) {
            obj = obj.$;
            types = types.$;
            ignore$Types = false;
          }
          var that = this;
          function executeReviver(type, val) {
            var _ref2 = that.revivers[type] || [], _ref3 = _slicedToArray(_ref2, 1), reviver = _ref3[0];
            if (!reviver) {
              throw new Error("Unregistered type: " + type);
            }
            if (sync && !("revive" in reviver)) {
              return val;
            }
            return reviver[sync && reviver.revive ? "revive" : !sync && reviver.reviveAsync ? "reviveAsync" : "revive"](val, stateObj);
          }
          function revivePlainObjects() {
            var plainObjectTypes = [];
            Object.entries(types).forEach(function(_ref4) {
              var _ref5 = _slicedToArray(_ref4, 2), keypath = _ref5[0], type = _ref5[1];
              if (type === "#") {
                return;
              }
              [].concat(type).forEach(function(type2) {
                var _ref6 = that.revivers[type2] || [null, {}], _ref7 = _slicedToArray(_ref6, 2), plain = _ref7[1].plain;
                if (!plain) {
                  return;
                }
                plainObjectTypes.push({
                  keypath,
                  type: type2
                });
                delete types[keypath];
              });
            });
            if (!plainObjectTypes.length) {
              return void 0;
            }
            return plainObjectTypes.sort(nestedPathsFirst).reduce(
              function reducer(possibleTypesonPromise2, _ref8) {
                var keypath = _ref8.keypath, type = _ref8.type;
                if (isThenable(possibleTypesonPromise2)) {
                  return possibleTypesonPromise2.then(function(val2) {
                    return reducer(val2, {
                      keypath,
                      type
                    });
                  });
                }
                var val = getByKeyPath(obj, keypath);
                val = executeReviver(type, val);
                if (hasConstructorOf(val, TypesonPromise)) {
                  return val.then(function(v) {
                    var newVal2 = setAtKeyPath(obj, keypath, v);
                    if (newVal2 === v) {
                      obj = newVal2;
                    }
                    return void 0;
                  });
                }
                var newVal = setAtKeyPath(obj, keypath, val);
                if (newVal === val) {
                  obj = newVal;
                }
                return void 0;
              },
              void 0
              // This argument must be explicit
            );
          }
          var revivalPromises = [];
          function _revive(keypath, value, target, clone, key) {
            if (ignore$Types && keypath === "$types") {
              return void 0;
            }
            var type = types[keypath];
            var isArr = isArray(value);
            if (isArr || isPlainObject(value)) {
              var _clone = isArr ? new Array(value.length) : {};
              keys(value).forEach(function(k2) {
                var val2 = _revive(keypath + (keypath ? "." : "") + escapeKeyPathComponent(k2), value[k2], target || _clone, _clone, k2);
                var set = function set2(v) {
                  if (hasConstructorOf(v, Undefined)) {
                    _clone[k2] = void 0;
                  } else if (v !== void 0) {
                    _clone[k2] = v;
                  }
                  return v;
                };
                if (hasConstructorOf(val2, TypesonPromise)) {
                  revivalPromises.push(val2.then(function(ret2) {
                    return set(ret2);
                  }));
                } else {
                  set(val2);
                }
              });
              value = _clone;
              while (keyPathResolutions.length) {
                var _keyPathResolutions$ = _slicedToArray(keyPathResolutions[0], 4), _target = _keyPathResolutions$[0], keyPath = _keyPathResolutions$[1], _clone2 = _keyPathResolutions$[2], k = _keyPathResolutions$[3];
                var val = getByKeyPath(_target, keyPath);
                if (val !== void 0) {
                  _clone2[k] = val;
                } else {
                  break;
                }
                keyPathResolutions.splice(0, 1);
              }
            }
            if (!type) {
              return value;
            }
            if (type === "#") {
              var _ret = getByKeyPath(target, value.slice(1));
              if (_ret === void 0) {
                keyPathResolutions.push([target, value.slice(1), clone, key]);
              }
              return _ret;
            }
            return [].concat(type).reduce(function reducer(val2, typ) {
              if (hasConstructorOf(val2, TypesonPromise)) {
                return val2.then(function(v) {
                  return reducer(v, typ);
                });
              }
              return executeReviver(typ, val2);
            }, value);
          }
          function checkUndefined(retrn) {
            return hasConstructorOf(retrn, Undefined) ? void 0 : retrn;
          }
          var possibleTypesonPromise = revivePlainObjects();
          var ret;
          if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {
            ret = possibleTypesonPromise.then(function() {
              return obj;
            });
          } else {
            ret = _revive("", obj, null);
            if (revivalPromises.length) {
              ret = TypesonPromise.resolve(ret).then(function(r) {
                return TypesonPromise.all([
                  // May be a TypesonPromise or not
                  r
                ].concat(revivalPromises));
              }).then(function(_ref9) {
                var _ref10 = _slicedToArray(_ref9, 1), r = _ref10[0];
                return r;
              });
            }
          }
          return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function() {
            throw new TypeError("Sync method requested but async result obtained");
          }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function() {
            throw new TypeError("Async method requested but sync result obtained");
          }() : sync ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));
        }
        /**
         * Also sync but throws on non-sync result.
         * @param {Any} obj
         * @param {object} opts
         * @returns {Any}
         */
      }, {
        key: "reviveSync",
        value: function reviveSync(obj, opts) {
          return this.revive(obj, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: true
          }));
        }
        /**
        * @param {Any} obj
        * @param {object} opts
        * @returns {Promise} Resolves to `*`
        */
      }, {
        key: "reviveAsync",
        value: function reviveAsync(obj, opts) {
          return this.revive(obj, _objectSpread2({
            throwOnBadSyncType: true
          }, opts, {
            sync: false
          }));
        }
        /**
         * Register types.
         * For examples on how to use this method, see
         *   {@link https://github.com/dfahlander/typeson-registry/tree/master/types}.
         * @param {object.<string,Function[]>[]} typeSpecSets - Types and
         *   their functions [test, encapsulate, revive];
         * @param {object} opts
         * @returns {Typeson}
         */
      }, {
        key: "register",
        value: function register(typeSpecSets, opts) {
          opts = opts || {};
          [].concat(typeSpecSets).forEach(function R(typeSpec) {
            var _this = this;
            if (isArray(typeSpec)) {
              return typeSpec.map(function(typSpec) {
                return R.call(_this, typSpec);
              });
            }
            typeSpec && keys(typeSpec).forEach(function(typeId) {
              if (typeId === "#") {
                throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");
              } else if (Typeson2.JSON_TYPES.includes(typeId)) {
                throw new TypeError("Plain JSON object types are reserved as type names");
              }
              var spec = typeSpec[typeId];
              var replacers = spec && spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;
              var existingReplacer = replacers.filter(function(r) {
                return r.type === typeId;
              });
              if (existingReplacer.length) {
                replacers.splice(replacers.indexOf(existingReplacer[0]), 1);
                delete this.revivers[typeId];
                delete this.types[typeId];
              }
              if (typeof spec === "function") {
                var Class = spec;
                spec = {
                  test: function test2(x) {
                    return x && x.constructor === Class;
                  },
                  replace: function replace2(x) {
                    return _objectSpread2({}, x);
                  },
                  revive: function revive2(x) {
                    return Object.assign(Object.create(Class.prototype), x);
                  }
                };
              } else if (isArray(spec)) {
                var _spec = spec, _spec2 = _slicedToArray(_spec, 3), test = _spec2[0], replace = _spec2[1], revive = _spec2[2];
                spec = {
                  test,
                  replace,
                  revive
                };
              }
              if (!spec || !spec.test) {
                return;
              }
              var replacerObj = {
                type: typeId,
                test: spec.test.bind(spec)
              };
              if (spec.replace) {
                replacerObj.replace = spec.replace.bind(spec);
              }
              if (spec.replaceAsync) {
                replacerObj.replaceAsync = spec.replaceAsync.bind(spec);
              }
              var start = typeof opts.fallback === "number" ? opts.fallback : opts.fallback ? 0 : Infinity;
              if (spec.testPlainObjects) {
                this.plainObjectReplacers.splice(start, 0, replacerObj);
              } else {
                this.nonplainObjectReplacers.splice(start, 0, replacerObj);
              }
              if (spec.revive || spec.reviveAsync) {
                var reviverObj = {};
                if (spec.revive) {
                  reviverObj.revive = spec.revive.bind(spec);
                }
                if (spec.reviveAsync) {
                  reviverObj.reviveAsync = spec.reviveAsync.bind(spec);
                }
                this.revivers[typeId] = [reviverObj, {
                  plain: spec.testPlainObjects
                }];
              }
              this.types[typeId] = spec;
            }, this);
          }, this);
          return this;
        }
      }]);
      return Typeson2;
    }();
    var Undefined = function Undefined2() {
      _classCallCheck(this, Undefined2);
    };
    Undefined.__typeson__type__ = "TypesonUndefined";
    Typeson.Undefined = Undefined;
    Typeson.Promise = TypesonPromise;
    Typeson.isThenable = isThenable;
    Typeson.toStringTag = toStringTag;
    Typeson.hasConstructorOf = hasConstructorOf;
    Typeson.isObject = isObject;
    Typeson.isPlainObject = isPlainObject;
    Typeson.isUserObject = isUserObject;
    Typeson.escapeKeyPathComponent = escapeKeyPathComponent;
    Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent;
    Typeson.getByKeyPath = getByKeyPath;
    Typeson.getJSONType = getJSONType;
    Typeson.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"];
    return Typeson;
  });
});
var structuredCloning = createCommonjsModule(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    function _typeof$1(e2) {
      return (_typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
        return typeof e3;
      } : function(e3) {
        return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
      })(e2);
    }
    function _classCallCheck$1(e2, t2) {
      if (!(e2 instanceof t2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties$1(e2, t2) {
      for (var r2 = 0; r2 < t2.length; r2++) {
        var n2 = t2[r2];
        n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
      }
    }
    function _defineProperty$1(e2, t2, r2) {
      return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
    }
    function ownKeys$1(e2, t2) {
      var r2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var n2 = Object.getOwnPropertySymbols(e2);
        t2 && (n2 = n2.filter(function(t3) {
          return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
        })), r2.push.apply(r2, n2);
      }
      return r2;
    }
    function _toConsumableArray$1(e2) {
      return function _arrayWithoutHoles$1(e3) {
        if (Array.isArray(e3)) return _arrayLikeToArray$1(e3);
      }(e2) || function _iterableToArray$1(e3) {
        if ("undefined" != typeof Symbol && Symbol.iterator in Object(e3)) return Array.from(e3);
      }(e2) || function _unsupportedIterableToArray$1(e3, t2) {
        if (!e3) return;
        if ("string" == typeof e3) return _arrayLikeToArray$1(e3, t2);
        var r2 = Object.prototype.toString.call(e3).slice(8, -1);
        "Object" === r2 && e3.constructor && (r2 = e3.constructor.name);
        if ("Map" === r2 || "Set" === r2) return Array.from(e3);
        if ("Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2)) return _arrayLikeToArray$1(e3, t2);
      }(e2) || function _nonIterableSpread$1() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function _arrayLikeToArray$1(e2, t2) {
      (null == t2 || t2 > e2.length) && (t2 = e2.length);
      for (var r2 = 0, n2 = new Array(t2); r2 < t2; r2++) n2[r2] = e2[r2];
      return n2;
    }
    function _typeof(e2) {
      return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof2(e3) {
        return typeof e3;
      } : function _typeof2(e3) {
        return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
      })(e2);
    }
    function _classCallCheck(e2, t2) {
      if (!(e2 instanceof t2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e2, t2) {
      for (var r2 = 0; r2 < t2.length; r2++) {
        var n2 = t2[r2];
        n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
      }
    }
    function _defineProperty(e2, t2, r2) {
      return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
    }
    function ownKeys(e2, t2) {
      var r2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var n2 = Object.getOwnPropertySymbols(e2);
        t2 && (n2 = n2.filter(function(t3) {
          return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
        })), r2.push.apply(r2, n2);
      }
      return r2;
    }
    function _objectSpread2(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var r2 = null != arguments[t2] ? arguments[t2] : {};
        t2 % 2 ? ownKeys(Object(r2), true).forEach(function(t3) {
          _defineProperty(e2, t3, r2[t3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(r2)) : ownKeys(Object(r2)).forEach(function(t3) {
          Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(r2, t3));
        });
      }
      return e2;
    }
    function _slicedToArray(e2, t2) {
      return function _arrayWithHoles(e3) {
        if (Array.isArray(e3)) return e3;
      }(e2) || function _iterableToArrayLimit(e3, t3) {
        if ("undefined" == typeof Symbol || !(Symbol.iterator in Object(e3))) return;
        var r2 = [], n2 = true, i2 = false, o2 = void 0;
        try {
          for (var a2, c2 = e3[Symbol.iterator](); !(n2 = (a2 = c2.next()).done) && (r2.push(a2.value), !t3 || r2.length !== t3); n2 = true) ;
        } catch (e4) {
          i2 = true, o2 = e4;
        } finally {
          try {
            n2 || null == c2.return || c2.return();
          } finally {
            if (i2) throw o2;
          }
        }
        return r2;
      }(e2, t2) || _unsupportedIterableToArray(e2, t2) || function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function _toConsumableArray(e2) {
      return function _arrayWithoutHoles(e3) {
        if (Array.isArray(e3)) return _arrayLikeToArray(e3);
      }(e2) || function _iterableToArray(e3) {
        if ("undefined" != typeof Symbol && Symbol.iterator in Object(e3)) return Array.from(e3);
      }(e2) || _unsupportedIterableToArray(e2) || function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function _unsupportedIterableToArray(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return _arrayLikeToArray(e2, t2);
        var r2 = Object.prototype.toString.call(e2).slice(8, -1);
        return "Object" === r2 && e2.constructor && (r2 = e2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? _arrayLikeToArray(e2, t2) : void 0;
      }
    }
    function _arrayLikeToArray(e2, t2) {
      (null == t2 || t2 > e2.length) && (t2 = e2.length);
      for (var r2 = 0, n2 = new Array(t2); r2 < t2; r2++) n2[r2] = e2[r2];
      return n2;
    }
    var e = function TypesonPromise(e2) {
      _classCallCheck(this, TypesonPromise), this.p = new Promise(e2);
    };
    e.__typeson__type__ = "TypesonPromise", "undefined" != typeof Symbol && (e.prototype[Symbol.toStringTag] = "TypesonPromise"), e.prototype.then = function(t2, r2) {
      var n2 = this;
      return new e(function(e2, i2) {
        n2.p.then(function(r3) {
          e2(t2 ? t2(r3) : r3);
        }).catch(function(e3) {
          return r2 ? r2(e3) : Promise.reject(e3);
        }).then(e2, i2);
      });
    }, e.prototype.catch = function(e2) {
      return this.then(null, e2);
    }, e.resolve = function(t2) {
      return new e(function(e2) {
        e2(t2);
      });
    }, e.reject = function(t2) {
      return new e(function(e2, r2) {
        r2(t2);
      });
    }, ["all", "race"].forEach(function(t2) {
      e[t2] = function(r2) {
        return new e(function(e2, n2) {
          Promise[t2](r2.map(function(e3) {
            return e3 && e3.constructor && "TypesonPromise" === e3.constructor.__typeson__type__ ? e3.p : e3;
          })).then(e2, n2);
        });
      };
    });
    var t = {}.toString, r = {}.hasOwnProperty, n = Object.getPrototypeOf, i = r.toString;
    function isThenable(e2, t2) {
      return isObject(e2) && "function" == typeof e2.then && (!t2 || "function" == typeof e2.catch);
    }
    function toStringTag(e2) {
      return t.call(e2).slice(8, -1);
    }
    function hasConstructorOf(e2, t2) {
      if (!e2 || "object" !== _typeof(e2)) return false;
      var o2 = n(e2);
      if (!o2) return null === t2;
      var a2 = r.call(o2, "constructor") && o2.constructor;
      return "function" != typeof a2 ? null === t2 : t2 === a2 || (null !== t2 && i.call(a2) === i.call(t2) || "function" == typeof t2 && "string" == typeof a2.__typeson__type__ && a2.__typeson__type__ === t2.__typeson__type__);
    }
    function isPlainObject(e2) {
      return !(!e2 || "Object" !== toStringTag(e2)) && (!n(e2) || hasConstructorOf(e2, Object));
    }
    function isObject(e2) {
      return e2 && "object" === _typeof(e2);
    }
    function escapeKeyPathComponent(e2) {
      return e2.replace(/~/g, "~0").replace(/\./g, "~1");
    }
    function unescapeKeyPathComponent(e2) {
      return e2.replace(/~1/g, ".").replace(/~0/g, "~");
    }
    function getByKeyPath(e2, t2) {
      if ("" === t2) return e2;
      var r2 = t2.indexOf(".");
      if (r2 > -1) {
        var n2 = e2[unescapeKeyPathComponent(t2.slice(0, r2))];
        return void 0 === n2 ? void 0 : getByKeyPath(n2, t2.slice(r2 + 1));
      }
      return e2[unescapeKeyPathComponent(t2)];
    }
    function setAtKeyPath(e2, t2, r2) {
      if ("" === t2) return r2;
      var n2 = t2.indexOf(".");
      return n2 > -1 ? setAtKeyPath(e2[unescapeKeyPathComponent(t2.slice(0, n2))], t2.slice(n2 + 1), r2) : (e2[unescapeKeyPathComponent(t2)] = r2, e2);
    }
    function _await(e2, t2, r2) {
      return r2 ? t2 ? t2(e2) : e2 : (e2 && e2.then || (e2 = Promise.resolve(e2)), t2 ? e2.then(t2) : e2);
    }
    var o = Object.keys, a = Array.isArray, c = {}.hasOwnProperty, u = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
    function _async(e2) {
      return function() {
        for (var t2 = [], r2 = 0; r2 < arguments.length; r2++) t2[r2] = arguments[r2];
        try {
          return Promise.resolve(e2.apply(this, t2));
        } catch (e3) {
          return Promise.reject(e3);
        }
      };
    }
    function nestedPathsFirst(e2, t2) {
      if ("" === e2.keypath) return -1;
      var r2 = e2.keypath.match(/\./g) || 0, n2 = t2.keypath.match(/\./g) || 0;
      return r2 && (r2 = r2.length), n2 && (n2 = n2.length), r2 > n2 ? -1 : r2 < n2 ? 1 : e2.keypath < t2.keypath ? -1 : e2.keypath > t2.keypath;
    }
    var s = function() {
      function Typeson(e2) {
        _classCallCheck(this, Typeson), this.options = e2, this.plainObjectReplacers = [], this.nonplainObjectReplacers = [], this.revivers = {}, this.types = {};
      }
      return function _createClass(e2, t2, r2) {
        return t2 && _defineProperties(e2.prototype, t2), r2 && _defineProperties(e2, r2), e2;
      }(Typeson, [{ key: "stringify", value: function stringify(e2, t2, r2, n2) {
        n2 = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), n2), {}, { stringification: true });
        var i2 = this.encapsulate(e2, null, n2);
        return a(i2) ? JSON.stringify(i2[0], t2, r2) : i2.then(function(e3) {
          return JSON.stringify(e3, t2, r2);
        });
      } }, { key: "stringifySync", value: function stringifySync(e2, t2, r2, n2) {
        return this.stringify(e2, t2, r2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, n2), {}, { sync: true }));
      } }, { key: "stringifyAsync", value: function stringifyAsync(e2, t2, r2, n2) {
        return this.stringify(e2, t2, r2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, n2), {}, { sync: false }));
      } }, { key: "parse", value: function parse(e2, t2, r2) {
        return r2 = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), r2), {}, { parse: true }), this.revive(JSON.parse(e2, t2), r2);
      } }, { key: "parseSync", value: function parseSync(e2, t2, r2) {
        return this.parse(e2, t2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, r2), {}, { sync: true }));
      } }, { key: "parseAsync", value: function parseAsync(e2, t2, r2) {
        return this.parse(e2, t2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, r2), {}, { sync: false }));
      } }, { key: "specialTypeNames", value: function specialTypeNames(e2, t2) {
        var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        return r2.returnTypeNames = true, this.encapsulate(e2, t2, r2);
      } }, { key: "rootTypeName", value: function rootTypeName(e2, t2) {
        var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        return r2.iterateNone = true, this.encapsulate(e2, t2, r2);
      } }, { key: "encapsulate", value: function encapsulate(t2, r2, n2) {
        var i2 = _async(function(t3, r3) {
          return _await(Promise.all(r3.map(function(e2) {
            return e2[1].p;
          })), function(n3) {
            return _await(Promise.all(n3.map(_async(function(n4) {
              var o2 = false, a2 = [], c2 = _slicedToArray(r3.splice(0, 1), 1), u2 = _slicedToArray(c2[0], 7), s3 = u2[0], f3 = u2[2], l3 = u2[3], p3 = u2[4], y3 = u2[5], v3 = u2[6], b3 = _encapsulate(s3, n4, f3, l3, a2, true, v3), d3 = hasConstructorOf(b3, e);
              return function _invoke(e2, t4) {
                var r4 = e2();
                return r4 && r4.then ? r4.then(t4) : t4(r4);
              }(function() {
                if (s3 && d3) return _await(b3.p, function(e2) {
                  return p3[y3] = e2, o2 = true, i2(t3, a2);
                });
              }, function(e2) {
                return o2 ? e2 : (s3 ? p3[y3] = b3 : t3 = d3 ? b3.p : b3, i2(t3, a2));
              });
            }))), function() {
              return t3;
            });
          });
        }), s2 = (n2 = _objectSpread2(_objectSpread2({ sync: true }, this.options), n2)).sync, f2 = this, l2 = {}, p2 = [], y2 = [], v2 = [], b2 = !("cyclic" in n2) || n2.cyclic, d2 = n2.encapsulateObserver, h2 = _encapsulate("", t2, b2, r2 || {}, v2);
        function finish(e2) {
          var t3 = Object.values(l2);
          if (n2.iterateNone) return t3.length ? t3[0] : Typeson.getJSONType(e2);
          if (t3.length) {
            if (n2.returnTypeNames) return _toConsumableArray(new Set(t3));
            e2 && isPlainObject(e2) && !c.call(e2, "$types") ? e2.$types = l2 : e2 = { $: e2, $types: { $: l2 } };
          } else isObject(e2) && c.call(e2, "$types") && (e2 = { $: e2, $types: true });
          return !n2.returnTypeNames && e2;
        }
        function _adaptBuiltinStateObjectProperties(e2, t3, r3) {
          Object.assign(e2, t3);
          var n3 = u.map(function(t4) {
            var r4 = e2[t4];
            return delete e2[t4], r4;
          });
          r3(), u.forEach(function(t4, r4) {
            e2[t4] = n3[r4];
          });
        }
        function _encapsulate(t3, r3, i3, u2, s3, v3, b3) {
          var h3, g2 = {}, m2 = _typeof(r3), O2 = d2 ? function(n3) {
            var o2 = b3 || u2.type || Typeson.getJSONType(r3);
            d2(Object.assign(n3 || g2, { keypath: t3, value: r3, cyclic: i3, stateObj: u2, promisesData: s3, resolvingTypesonPromise: v3, awaitingTypesonPromise: hasConstructorOf(r3, e) }, { type: o2 }));
          } : null;
          if (["string", "boolean", "number", "undefined"].includes(m2)) return void 0 === r3 || Number.isNaN(r3) || r3 === Number.NEGATIVE_INFINITY || r3 === Number.POSITIVE_INFINITY ? (h3 = u2.replaced ? r3 : replace(t3, r3, u2, s3, false, v3, O2)) !== r3 && (g2 = { replaced: h3 }) : h3 = r3, O2 && O2(), h3;
          if (null === r3) return O2 && O2(), r3;
          if (i3 && !u2.iterateIn && !u2.iterateUnsetNumeric && r3 && "object" === _typeof(r3)) {
            var _2 = p2.indexOf(r3);
            if (!(_2 < 0)) return l2[t3] = "#", O2 && O2({ cyclicKeypath: y2[_2] }), "#" + y2[_2];
            true === i3 && (p2.push(r3), y2.push(t3));
          }
          var j2, S2 = isPlainObject(r3), T2 = a(r3), w2 = (S2 || T2) && (!f2.plainObjectReplacers.length || u2.replaced) || u2.iterateIn ? r3 : replace(t3, r3, u2, s3, S2 || T2, null, O2);
          if (w2 !== r3 ? (h3 = w2, g2 = { replaced: w2 }) : "" === t3 && hasConstructorOf(r3, e) ? (s3.push([t3, r3, i3, u2, void 0, void 0, u2.type]), h3 = r3) : T2 && "object" !== u2.iterateIn || "array" === u2.iterateIn ? (j2 = new Array(r3.length), g2 = { clone: j2 }) : (["function", "symbol"].includes(_typeof(r3)) || "toJSON" in r3 || hasConstructorOf(r3, e) || hasConstructorOf(r3, Promise) || hasConstructorOf(r3, ArrayBuffer)) && !S2 && "object" !== u2.iterateIn ? h3 = r3 : (j2 = {}, u2.addLength && (j2.length = r3.length), g2 = { clone: j2 }), O2 && O2(), n2.iterateNone) return j2 || h3;
          if (!j2) return h3;
          if (u2.iterateIn) {
            var A2 = function _loop(n3) {
              var o2 = { ownKeys: c.call(r3, n3) };
              _adaptBuiltinStateObjectProperties(u2, o2, function() {
                var o3 = t3 + (t3 ? "." : "") + escapeKeyPathComponent(n3), a2 = _encapsulate(o3, r3[n3], Boolean(i3), u2, s3, v3);
                hasConstructorOf(a2, e) ? s3.push([o3, a2, Boolean(i3), u2, j2, n3, u2.type]) : void 0 !== a2 && (j2[n3] = a2);
              });
            };
            for (var P2 in r3) A2(P2);
            O2 && O2({ endIterateIn: true, end: true });
          } else o(r3).forEach(function(n3) {
            var o2 = t3 + (t3 ? "." : "") + escapeKeyPathComponent(n3);
            _adaptBuiltinStateObjectProperties(u2, { ownKeys: true }, function() {
              var t4 = _encapsulate(o2, r3[n3], Boolean(i3), u2, s3, v3);
              hasConstructorOf(t4, e) ? s3.push([o2, t4, Boolean(i3), u2, j2, n3, u2.type]) : void 0 !== t4 && (j2[n3] = t4);
            });
          }), O2 && O2({ endIterateOwn: true, end: true });
          if (u2.iterateUnsetNumeric) {
            for (var I2 = r3.length, C2 = function _loop2(n3) {
              if (!(n3 in r3)) {
                var o2 = t3 + (t3 ? "." : "") + n3;
                _adaptBuiltinStateObjectProperties(u2, { ownKeys: false }, function() {
                  var t4 = _encapsulate(o2, void 0, Boolean(i3), u2, s3, v3);
                  hasConstructorOf(t4, e) ? s3.push([o2, t4, Boolean(i3), u2, j2, n3, u2.type]) : void 0 !== t4 && (j2[n3] = t4);
                });
              }
            }, N2 = 0; N2 < I2; N2++) C2(N2);
            O2 && O2({ endIterateUnsetNumeric: true, end: true });
          }
          return j2;
        }
        function replace(e2, t3, r3, n3, i3, o2, a2) {
          for (var c2 = i3 ? f2.plainObjectReplacers : f2.nonplainObjectReplacers, u2 = c2.length; u2--; ) {
            var p3 = c2[u2];
            if (p3.test(t3, r3)) {
              var y3 = p3.type;
              if (f2.revivers[y3]) {
                var v3 = l2[e2];
                l2[e2] = v3 ? [y3].concat(v3) : y3;
              }
              return Object.assign(r3, { type: y3, replaced: true }), !s2 && p3.replaceAsync || p3.replace ? (a2 && a2({ replacing: true }), _encapsulate(e2, p3[s2 || !p3.replaceAsync ? "replace" : "replaceAsync"](t3, r3), b2 && "readonly", r3, n3, o2, y3)) : (a2 && a2({ typeDetected: true }), _encapsulate(e2, t3, b2 && "readonly", r3, n3, o2, y3));
            }
          }
          return t3;
        }
        return v2.length ? s2 && n2.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : Promise.resolve(i2(h2, v2)).then(finish) : !s2 && n2.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : n2.stringification && s2 ? [finish(h2)] : s2 ? finish(h2) : Promise.resolve(finish(h2));
      } }, { key: "encapsulateSync", value: function encapsulateSync(e2, t2, r2) {
        return this.encapsulate(e2, t2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, r2), {}, { sync: true }));
      } }, { key: "encapsulateAsync", value: function encapsulateAsync(e2, t2, r2) {
        return this.encapsulate(e2, t2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, r2), {}, { sync: false }));
      } }, { key: "revive", value: function revive(t2, r2) {
        var n2 = t2 && t2.$types;
        if (!n2) return t2;
        if (true === n2) return t2.$;
        var i2 = (r2 = _objectSpread2(_objectSpread2({ sync: true }, this.options), r2)).sync, c2 = [], u2 = {}, s2 = true;
        n2.$ && isPlainObject(n2.$) && (t2 = t2.$, n2 = n2.$, s2 = false);
        var l2 = this;
        function executeReviver(e2, t3) {
          var r3 = _slicedToArray(l2.revivers[e2] || [], 1)[0];
          if (!r3) throw new Error("Unregistered type: " + e2);
          return i2 && !("revive" in r3) ? t3 : r3[i2 && r3.revive ? "revive" : !i2 && r3.reviveAsync ? "reviveAsync" : "revive"](t3, u2);
        }
        var p2 = [];
        function checkUndefined(e2) {
          return hasConstructorOf(e2, f) ? void 0 : e2;
        }
        var y2, v2 = function revivePlainObjects() {
          var r3 = [];
          if (Object.entries(n2).forEach(function(e2) {
            var t3 = _slicedToArray(e2, 2), i3 = t3[0], o2 = t3[1];
            "#" !== o2 && [].concat(o2).forEach(function(e3) {
              _slicedToArray(l2.revivers[e3] || [null, {}], 2)[1].plain && (r3.push({ keypath: i3, type: e3 }), delete n2[i3]);
            });
          }), r3.length) return r3.sort(nestedPathsFirst).reduce(function reducer(r4, n3) {
            var i3 = n3.keypath, o2 = n3.type;
            if (isThenable(r4)) return r4.then(function(e2) {
              return reducer(e2, { keypath: i3, type: o2 });
            });
            var a2 = getByKeyPath(t2, i3);
            if (hasConstructorOf(a2 = executeReviver(o2, a2), e)) return a2.then(function(e2) {
              var r5 = setAtKeyPath(t2, i3, e2);
              r5 === e2 && (t2 = r5);
            });
            var c3 = setAtKeyPath(t2, i3, a2);
            c3 === a2 && (t2 = c3);
          }, void 0);
        }();
        return hasConstructorOf(v2, e) ? y2 = v2.then(function() {
          return t2;
        }) : (y2 = function _revive(t3, r3, i3, u3, l3) {
          if (!s2 || "$types" !== t3) {
            var y3 = n2[t3], v3 = a(r3);
            if (v3 || isPlainObject(r3)) {
              var b2 = v3 ? new Array(r3.length) : {};
              for (o(r3).forEach(function(n3) {
                var o2 = _revive(t3 + (t3 ? "." : "") + escapeKeyPathComponent(n3), r3[n3], i3 || b2, b2, n3), a2 = function set(e2) {
                  return hasConstructorOf(e2, f) ? b2[n3] = void 0 : void 0 !== e2 && (b2[n3] = e2), e2;
                };
                hasConstructorOf(o2, e) ? p2.push(o2.then(function(e2) {
                  return a2(e2);
                })) : a2(o2);
              }), r3 = b2; c2.length; ) {
                var d2 = _slicedToArray(c2[0], 4), h2 = d2[0], g2 = d2[1], m2 = d2[2], O2 = d2[3], _2 = getByKeyPath(h2, g2);
                if (void 0 === _2) break;
                m2[O2] = _2, c2.splice(0, 1);
              }
            }
            if (!y3) return r3;
            if ("#" === y3) {
              var j2 = getByKeyPath(i3, r3.slice(1));
              return void 0 === j2 && c2.push([i3, r3.slice(1), u3, l3]), j2;
            }
            return [].concat(y3).reduce(function reducer(t4, r4) {
              return hasConstructorOf(t4, e) ? t4.then(function(e2) {
                return reducer(e2, r4);
              }) : executeReviver(r4, t4);
            }, r3);
          }
        }("", t2, null), p2.length && (y2 = e.resolve(y2).then(function(t3) {
          return e.all([t3].concat(p2));
        }).then(function(e2) {
          return _slicedToArray(e2, 1)[0];
        }))), isThenable(y2) ? i2 && r2.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : hasConstructorOf(y2, e) ? y2.p.then(checkUndefined) : y2 : !i2 && r2.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : i2 ? checkUndefined(y2) : Promise.resolve(checkUndefined(y2));
      } }, { key: "reviveSync", value: function reviveSync(e2, t2) {
        return this.revive(e2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, t2), {}, { sync: true }));
      } }, { key: "reviveAsync", value: function reviveAsync(e2, t2) {
        return this.revive(e2, _objectSpread2(_objectSpread2({ throwOnBadSyncType: true }, t2), {}, { sync: false }));
      } }, { key: "register", value: function register(e2, t2) {
        return t2 = t2 || {}, [].concat(e2).forEach(function R(e3) {
          var r2 = this;
          if (a(e3)) return e3.map(function(e4) {
            return R.call(r2, e4);
          });
          e3 && o(e3).forEach(function(r3) {
            if ("#" === r3) throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");
            if (Typeson.JSON_TYPES.includes(r3)) throw new TypeError("Plain JSON object types are reserved as type names");
            var n2 = e3[r3], i2 = n2 && n2.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers, o2 = i2.filter(function(e4) {
              return e4.type === r3;
            });
            if (o2.length && (i2.splice(i2.indexOf(o2[0]), 1), delete this.revivers[r3], delete this.types[r3]), "function" == typeof n2) {
              var c2 = n2;
              n2 = { test: function test(e4) {
                return e4 && e4.constructor === c2;
              }, replace: function replace(e4) {
                return _objectSpread2({}, e4);
              }, revive: function revive(e4) {
                return Object.assign(Object.create(c2.prototype), e4);
              } };
            } else if (a(n2)) {
              var u2 = _slicedToArray(n2, 3);
              n2 = { test: u2[0], replace: u2[1], revive: u2[2] };
            }
            if (n2 && n2.test) {
              var s2 = { type: r3, test: n2.test.bind(n2) };
              n2.replace && (s2.replace = n2.replace.bind(n2)), n2.replaceAsync && (s2.replaceAsync = n2.replaceAsync.bind(n2));
              var f2 = "number" == typeof t2.fallback ? t2.fallback : t2.fallback ? 0 : Number.POSITIVE_INFINITY;
              if (n2.testPlainObjects ? this.plainObjectReplacers.splice(f2, 0, s2) : this.nonplainObjectReplacers.splice(f2, 0, s2), n2.revive || n2.reviveAsync) {
                var l2 = {};
                n2.revive && (l2.revive = n2.revive.bind(n2)), n2.reviveAsync && (l2.reviveAsync = n2.reviveAsync.bind(n2)), this.revivers[r3] = [l2, { plain: n2.testPlainObjects }];
              }
              this.types[r3] = n2;
            }
          }, this);
        }, this), this;
      } }]), Typeson;
    }(), f = function Undefined() {
      _classCallCheck(this, Undefined);
    };
    f.__typeson__type__ = "TypesonUndefined", s.Undefined = f, s.Promise = e, s.isThenable = isThenable, s.toStringTag = toStringTag, s.hasConstructorOf = hasConstructorOf, s.isObject = isObject, s.isPlainObject = isPlainObject, s.isUserObject = function isUserObject(e2) {
      if (!e2 || "Object" !== toStringTag(e2)) return false;
      var t2 = n(e2);
      return !t2 || (hasConstructorOf(e2, Object) || isUserObject(t2));
    }, s.escapeKeyPathComponent = escapeKeyPathComponent, s.unescapeKeyPathComponent = unescapeKeyPathComponent, s.getByKeyPath = getByKeyPath, s.getJSONType = function getJSONType(e2) {
      return null === e2 ? "null" : Array.isArray(e2) ? "array" : _typeof(e2);
    }, s.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"];
    for (var l = { userObject: { test: function test(e2, t2) {
      return s.isUserObject(e2);
    }, replace: function replace(e2) {
      return function _objectSpread2$1(e3) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var r2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? ownKeys$1(Object(r2), true).forEach(function(t3) {
            _defineProperty$1(e3, t3, r2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : ownKeys$1(Object(r2)).forEach(function(t3) {
            Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(r2, t3));
          });
        }
        return e3;
      }({}, e2);
    }, revive: function revive(e2) {
      return e2;
    } } }, p = [{ arrayNonindexKeys: { testPlainObjects: true, test: function test(e2, t2) {
      return !!Array.isArray(e2) && (Object.keys(e2).some(function(e3) {
        return String(Number.parseInt(e3)) !== e3;
      }) && (t2.iterateIn = "object", t2.addLength = true), true);
    }, replace: function replace(e2, t2) {
      return t2.iterateUnsetNumeric = true, e2;
    }, revive: function revive(e2) {
      if (Array.isArray(e2)) return e2;
      var t2 = [];
      return Object.keys(e2).forEach(function(r2) {
        var n2 = e2[r2];
        t2[r2] = n2;
      }), t2;
    } } }, { sparseUndefined: { test: function test(e2, t2) {
      return void 0 === e2 && false === t2.ownKeys;
    }, replace: function replace(e2) {
      return 0;
    }, revive: function revive(e2) {
    } } }], y = { undef: { test: function test(e2, t2) {
      return void 0 === e2 && (t2.ownKeys || !("ownKeys" in t2));
    }, replace: function replace(e2) {
      return 0;
    }, revive: function revive(e2) {
      return new s.Undefined();
    } } }, v = { StringObject: { test: function test(e2) {
      return "String" === s.toStringTag(e2) && "object" === _typeof$1(e2);
    }, replace: function replace(e2) {
      return String(e2);
    }, revive: function revive(e2) {
      return new String(e2);
    } }, BooleanObject: { test: function test(e2) {
      return "Boolean" === s.toStringTag(e2) && "object" === _typeof$1(e2);
    }, replace: function replace(e2) {
      return Boolean(e2);
    }, revive: function revive(e2) {
      return new Boolean(e2);
    } }, NumberObject: { test: function test(e2) {
      return "Number" === s.toStringTag(e2) && "object" === _typeof$1(e2);
    }, replace: function replace(e2) {
      return Number(e2);
    }, revive: function revive(e2) {
      return new Number(e2);
    } } }, b = [{ nan: { test: function test(e2) {
      return Number.isNaN(e2);
    }, replace: function replace(e2) {
      return "NaN";
    }, revive: function revive(e2) {
      return Number.NaN;
    } } }, { infinity: { test: function test(e2) {
      return e2 === Number.POSITIVE_INFINITY;
    }, replace: function replace(e2) {
      return "Infinity";
    }, revive: function revive(e2) {
      return Number.POSITIVE_INFINITY;
    } } }, { negativeInfinity: { test: function test(e2) {
      return e2 === Number.NEGATIVE_INFINITY;
    }, replace: function replace(e2) {
      return "-Infinity";
    }, revive: function revive(e2) {
      return Number.NEGATIVE_INFINITY;
    } } }], d = { date: { test: function test(e2) {
      return "Date" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      var t2 = e2.getTime();
      return Number.isNaN(t2) ? "NaN" : t2;
    }, revive: function revive(e2) {
      return "NaN" === e2 ? new Date(Number.NaN) : new Date(e2);
    } } }, h = { regexp: { test: function test(e2) {
      return "RegExp" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      return { source: e2.source, flags: (e2.global ? "g" : "") + (e2.ignoreCase ? "i" : "") + (e2.multiline ? "m" : "") + (e2.sticky ? "y" : "") + (e2.unicode ? "u" : "") };
    }, revive: function revive(e2) {
      var t2 = e2.source, r2 = e2.flags;
      return new RegExp(t2, r2);
    } } }, g = { map: { test: function test(e2) {
      return "Map" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      return _toConsumableArray$1(e2.entries());
    }, revive: function revive(e2) {
      return new Map(e2);
    } } }, m = { set: { test: function test(e2) {
      return "Set" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      return _toConsumableArray$1(e2.values());
    }, revive: function revive(e2) {
      return new Set(e2);
    } } }, O = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", _ = new Uint8Array(256), j = 0; j < O.length; j++) _[O.charCodeAt(j)] = j;
    var S = function encode3(e2, t2, r2) {
      null == r2 && (r2 = e2.byteLength);
      for (var n2 = new Uint8Array(e2, t2 || 0, r2), i2 = n2.length, o2 = "", a2 = 0; a2 < i2; a2 += 3) o2 += O[n2[a2] >> 2], o2 += O[(3 & n2[a2]) << 4 | n2[a2 + 1] >> 4], o2 += O[(15 & n2[a2 + 1]) << 2 | n2[a2 + 2] >> 6], o2 += O[63 & n2[a2 + 2]];
      return i2 % 3 == 2 ? o2 = o2.slice(0, -1) + "=" : i2 % 3 == 1 && (o2 = o2.slice(0, -2) + "=="), o2;
    }, T = function decode3(e2) {
      var t2, r2, n2, i2, o2 = e2.length, a2 = 0.75 * e2.length, c2 = 0;
      "=" === e2[e2.length - 1] && (a2--, "=" === e2[e2.length - 2] && a2--);
      for (var u2 = new ArrayBuffer(a2), s2 = new Uint8Array(u2), f2 = 0; f2 < o2; f2 += 4) t2 = _[e2.charCodeAt(f2)], r2 = _[e2.charCodeAt(f2 + 1)], n2 = _[e2.charCodeAt(f2 + 2)], i2 = _[e2.charCodeAt(f2 + 3)], s2[c2++] = t2 << 2 | r2 >> 4, s2[c2++] = (15 & r2) << 4 | n2 >> 2, s2[c2++] = (3 & n2) << 6 | 63 & i2;
      return u2;
    }, w = { arraybuffer: { test: function test(e2) {
      return "ArrayBuffer" === s.toStringTag(e2);
    }, replace: function replace(e2, t2) {
      t2.buffers || (t2.buffers = []);
      var r2 = t2.buffers.indexOf(e2);
      return r2 > -1 ? { index: r2 } : (t2.buffers.push(e2), S(e2));
    }, revive: function revive(e2, t2) {
      if (t2.buffers || (t2.buffers = []), "object" === _typeof$1(e2)) return t2.buffers[e2.index];
      var r2 = T(e2);
      return t2.buffers.push(r2), r2;
    } } }, A = "undefined" == typeof self ? commonjsGlobal : self, P = {};
    ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(e2) {
      var t2 = e2, r2 = A[t2];
      r2 && (P[e2.toLowerCase()] = { test: function test(e3) {
        return s.toStringTag(e3) === t2;
      }, replace: function replace(e3, t3) {
        var r3 = e3.buffer, n2 = e3.byteOffset, i2 = e3.length;
        t3.buffers || (t3.buffers = []);
        var o2 = t3.buffers.indexOf(r3);
        return o2 > -1 ? { index: o2, byteOffset: n2, length: i2 } : (t3.buffers.push(r3), { encoded: S(r3), byteOffset: n2, length: i2 });
      }, revive: function revive(e3, t3) {
        t3.buffers || (t3.buffers = []);
        var n2, i2 = e3.byteOffset, o2 = e3.length, a2 = e3.encoded, c2 = e3.index;
        return "index" in e3 ? n2 = t3.buffers[c2] : (n2 = T(a2), t3.buffers.push(n2)), new r2(n2, i2, o2);
      } });
    });
    var I = { dataview: { test: function test(e2) {
      return "DataView" === s.toStringTag(e2);
    }, replace: function replace(e2, t2) {
      var r2 = e2.buffer, n2 = e2.byteOffset, i2 = e2.byteLength;
      t2.buffers || (t2.buffers = []);
      var o2 = t2.buffers.indexOf(r2);
      return o2 > -1 ? { index: o2, byteOffset: n2, byteLength: i2 } : (t2.buffers.push(r2), { encoded: S(r2), byteOffset: n2, byteLength: i2 });
    }, revive: function revive(e2, t2) {
      t2.buffers || (t2.buffers = []);
      var r2, n2 = e2.byteOffset, i2 = e2.byteLength, o2 = e2.encoded, a2 = e2.index;
      return "index" in e2 ? r2 = t2.buffers[a2] : (r2 = T(o2), t2.buffers.push(r2)), new DataView(r2, n2, i2);
    } } }, C = { IntlCollator: { test: function test(e2) {
      return s.hasConstructorOf(e2, Intl.Collator);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.Collator(e2.locale, e2);
    } }, IntlDateTimeFormat: { test: function test(e2) {
      return s.hasConstructorOf(e2, Intl.DateTimeFormat);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.DateTimeFormat(e2.locale, e2);
    } }, IntlNumberFormat: { test: function test(e2) {
      return s.hasConstructorOf(e2, Intl.NumberFormat);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.NumberFormat(e2.locale, e2);
    } } };
    function string2arraybuffer(e2) {
      for (var t2 = new Uint8Array(e2.length), r2 = 0; r2 < e2.length; r2++) t2[r2] = e2.charCodeAt(r2);
      return t2.buffer;
    }
    var N = { file: { test: function test(e2) {
      return "File" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      var t2 = new XMLHttpRequest();
      if (t2.overrideMimeType("text/plain; charset=x-user-defined"), t2.open("GET", URL.createObjectURL(e2), false), t2.send(), 200 !== t2.status && 0 !== t2.status) throw new Error("Bad File access: " + t2.status);
      return { type: e2.type, stringContents: t2.responseText, name: e2.name, lastModified: e2.lastModified };
    }, revive: function revive(e2) {
      var t2 = e2.name, r2 = e2.type, n2 = e2.stringContents, i2 = e2.lastModified;
      return new File([string2arraybuffer(n2)], t2, { type: r2, lastModified: i2 });
    }, replaceAsync: function replaceAsync(e2) {
      return new s.Promise(function(t2, r2) {
        var n2 = new FileReader();
        n2.addEventListener("load", function() {
          t2({ type: e2.type, stringContents: n2.result, name: e2.name, lastModified: e2.lastModified });
        }), n2.addEventListener("error", function() {
          r2(n2.error);
        }), n2.readAsBinaryString(e2);
      });
    } } }, k = { bigint: { test: function test(e2) {
      return "bigint" == typeof e2;
    }, replace: function replace(e2) {
      return String(e2);
    }, revive: function revive(e2) {
      return BigInt(e2);
    } } }, E = { bigintObject: { test: function test(e2) {
      return "object" === _typeof$1(e2) && s.hasConstructorOf(e2, BigInt);
    }, replace: function replace(e2) {
      return String(e2);
    }, revive: function revive(e2) {
      return new Object(BigInt(e2));
    } } }, B = { cryptokey: { test: function test(e2) {
      return "CryptoKey" === s.toStringTag(e2) && e2.extractable;
    }, replaceAsync: function replaceAsync(e2) {
      return new s.Promise(function(t2, r2) {
        crypto.subtle.exportKey("jwk", e2).catch(function(e3) {
          r2(e3);
        }).then(function(r3) {
          t2({ jwk: r3, algorithm: e2.algorithm, usages: e2.usages });
        });
      });
    }, revive: function revive(e2) {
      var t2 = e2.jwk, r2 = e2.algorithm, n2 = e2.usages;
      return crypto.subtle.importKey("jwk", t2, r2, true, n2);
    } } };
    return [l, y, p, v, b, d, h, { imagedata: { test: function test(e2) {
      return "ImageData" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      return { array: _toConsumableArray$1(e2.data), width: e2.width, height: e2.height };
    }, revive: function revive(e2) {
      return new ImageData(new Uint8ClampedArray(e2.array), e2.width, e2.height);
    } } }, { imagebitmap: { test: function test(e2) {
      return "ImageBitmap" === s.toStringTag(e2) || e2 && e2.dataset && "ImageBitmap" === e2.dataset.toStringTag;
    }, replace: function replace(e2) {
      var t2 = document.createElement("canvas");
      return t2.getContext("2d").drawImage(e2, 0, 0), t2.toDataURL();
    }, revive: function revive(e2) {
      var t2 = document.createElement("canvas"), r2 = t2.getContext("2d"), n2 = document.createElement("img");
      return n2.addEventListener("load", function() {
        r2.drawImage(n2, 0, 0);
      }), n2.src = e2, t2;
    }, reviveAsync: function reviveAsync(e2) {
      var t2 = document.createElement("canvas"), r2 = t2.getContext("2d"), n2 = document.createElement("img");
      return n2.addEventListener("load", function() {
        r2.drawImage(n2, 0, 0);
      }), n2.src = e2, createImageBitmap(t2);
    } } }, N, { file: N.file, filelist: { test: function test(e2) {
      return "FileList" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      for (var t2 = [], r2 = 0; r2 < e2.length; r2++) t2[r2] = e2.item(r2);
      return t2;
    }, revive: function revive(e2) {
      return new (function() {
        function FileList() {
          _classCallCheck$1(this, FileList), this._files = arguments[0], this.length = this._files.length;
        }
        return function _createClass$1(e3, t2, r2) {
          return t2 && _defineProperties$1(e3.prototype, t2), r2 && _defineProperties$1(e3, r2), e3;
        }(FileList, [{ key: "item", value: function item(e3) {
          return this._files[e3];
        } }, { key: Symbol.toStringTag, get: function get() {
          return "FileList";
        } }]), FileList;
      }())(e2);
    } } }, { blob: { test: function test(e2) {
      return "Blob" === s.toStringTag(e2);
    }, replace: function replace(e2) {
      var t2 = new XMLHttpRequest();
      if (t2.overrideMimeType("text/plain; charset=x-user-defined"), t2.open("GET", URL.createObjectURL(e2), false), t2.send(), 200 !== t2.status && 0 !== t2.status) throw new Error("Bad Blob access: " + t2.status);
      return { type: e2.type, stringContents: t2.responseText };
    }, revive: function revive(e2) {
      var t2 = e2.type, r2 = e2.stringContents;
      return new Blob([string2arraybuffer(r2)], { type: t2 });
    }, replaceAsync: function replaceAsync(e2) {
      return new s.Promise(function(t2, r2) {
        var n2 = new FileReader();
        n2.addEventListener("load", function() {
          t2({ type: e2.type, stringContents: n2.result });
        }), n2.addEventListener("error", function() {
          r2(n2.error);
        }), n2.readAsBinaryString(e2);
      });
    } } }].concat("function" == typeof Map ? g : [], "function" == typeof Set ? m : [], "function" == typeof ArrayBuffer ? w : [], "function" == typeof Uint8Array ? P : [], "function" == typeof DataView ? I : [], "undefined" != typeof Intl ? C : [], "undefined" != typeof crypto ? B : [], "undefined" != typeof BigInt ? [k, E] : []);
  });
});
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var lookup = new Uint8Array(256);
for (i = 0; i < chars.length; i++) {
  lookup[chars.codePointAt(i)] = i;
}
var i;
var encode = function encode2(arraybuffer, byteOffset, lngth) {
  if (lngth === null || lngth === void 0) {
    lngth = arraybuffer.byteLength;
  }
  var bytes = new Uint8Array(
    arraybuffer,
    byteOffset || 0,
    // Default needed for Safari
    lngth
  );
  var len = bytes.length;
  var base64 = "";
  for (var _i = 0; _i < len; _i += 3) {
    base64 += chars[bytes[_i] >> 2];
    base64 += chars[(bytes[_i] & 3) << 4 | bytes[_i + 1] >> 4];
    base64 += chars[(bytes[_i + 1] & 15) << 2 | bytes[_i + 2] >> 6];
    base64 += chars[bytes[_i + 2] & 63];
  }
  if (len % 3 === 2) {
    base64 = base64.slice(0, -1) + "=";
  } else if (len % 3 === 1) {
    base64 = base64.slice(0, -2) + "==";
  }
  return base64;
};
var decode = function decode2(base64) {
  var len = base64.length;
  var bufferLength = base64.length * 0.75;
  var p = 0;
  var encoded1, encoded2, encoded3, encoded4;
  if (base64[base64.length - 1] === "=") {
    bufferLength--;
    if (base64[base64.length - 2] === "=") {
      bufferLength--;
    }
  }
  var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
  for (var _i2 = 0; _i2 < len; _i2 += 4) {
    encoded1 = lookup[base64.codePointAt(_i2)];
    encoded2 = lookup[base64.codePointAt(_i2 + 1)];
    encoded3 = lookup[base64.codePointAt(_i2 + 2)];
    encoded4 = lookup[base64.codePointAt(_i2 + 3)];
    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }
  return arraybuffer;
};
var _global = typeof self === "undefined" ? global : self;
var exportObj = {};
[
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Uint16Array",
  "Int32Array",
  "Uint32Array",
  "Float32Array",
  "Float64Array"
].forEach(function(typeName) {
  var arrType = typeName;
  var TypedArray = _global[arrType];
  if (TypedArray) {
    exportObj[typeName.toLowerCase() + "2"] = {
      test: function(x) {
        return typeson.toStringTag(x) === arrType;
      },
      replace: function(_a) {
        var buffer = _a.buffer, byteOffset = _a.byteOffset, length = _a.length;
        return {
          buffer,
          byteOffset,
          length
        };
      },
      revive: function(b64Obj) {
        var buffer = b64Obj.buffer, byteOffset = b64Obj.byteOffset, length = b64Obj.length;
        return new TypedArray(buffer, byteOffset, length);
      }
    };
  }
});
var arrayBuffer = {
  arraybuffer: {
    test: function(x) {
      return typeson.toStringTag(x) === "ArrayBuffer";
    },
    replace: function(b) {
      return encode(b, 0, b.byteLength);
    },
    revive: function(b64) {
      var buffer = decode(b64);
      return buffer;
    }
  }
};
var TSON = new typeson().register(structuredCloning);
var readBlobsSynchronously = "FileReaderSync" in self;
var blobsToAwait = [];
var blobsToAwaitPos = 0;
TSON.register([
  arrayBuffer,
  exportObj,
  {
    blob2: {
      test: function(x) {
        return typeson.toStringTag(x) === "Blob";
      },
      replace: function(b) {
        if (b.isClosed) {
          throw new Error("The Blob is closed");
        }
        if (readBlobsSynchronously) {
          var data = readBlobSync(b, "binary");
          var base64 = encode(data, 0, data.byteLength);
          return {
            type: b.type,
            data: base64
          };
        } else {
          blobsToAwait.push(b);
          var result = {
            type: b.type,
            data: { start: blobsToAwaitPos, end: blobsToAwaitPos + b.size }
          };
          blobsToAwaitPos += b.size;
          return result;
        }
      },
      finalize: function(b, ba) {
        b.data = encode(ba, 0, ba.byteLength);
      },
      revive: function(_a) {
        var type = _a.type, data = _a.data;
        return new Blob([decode(data)], { type });
      }
    }
  }
]);
TSON.mustFinalize = function() {
  return blobsToAwait.length > 0;
};
TSON.finalize = function(items) {
  return __awaiter(void 0, void 0, void 0, function() {
    var allChunks, _i, items_1, item, types, arrayType, keyPath, typeName, typeSpec, b;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readBlobAsync(new Blob(blobsToAwait), "binary")];
        case 1:
          allChunks = _a.sent();
          if (items) {
            for (_i = 0, items_1 = items; _i < items_1.length; _i++) {
              item = items_1[_i];
              if (item.$types) {
                types = item.$types;
                arrayType = types.$;
                if (arrayType)
                  types = types.$;
                for (keyPath in types) {
                  typeName = types[keyPath];
                  typeSpec = TSON.types[typeName];
                  if (typeSpec && typeSpec.finalize) {
                    b = import_wrapper_default.getByKeyPath(item, arrayType ? "$." + keyPath : keyPath);
                    typeSpec.finalize(b, allChunks.slice(b.start, b.end));
                  }
                }
              }
            }
          }
          blobsToAwait = [];
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var DEFAULT_ROWS_PER_CHUNK = 2e3;
function exportDB(db, options) {
  return __awaiter(this, void 0, void 0, function() {
    function exportAll() {
      return __awaiter(this, void 0, void 0, function() {
        var tablesRowCounts, emptyExportJson, posEndDataArray, firstJsonSlice, filter, transform, _loop_1, _i, tables_1, tableName;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, Promise.all(targetTables.map(function(table) {
                return table.count();
              }))];
            case 1:
              tablesRowCounts = _a.sent();
              tablesRowCounts.forEach(function(rowCount, i) {
                return tables[i].rowCount = rowCount;
              });
              progress.totalRows = tablesRowCounts.reduce(function(p, c) {
                return p + c;
              });
              emptyExportJson = JSON.stringify(emptyExport, void 0, prettyJson ? 2 : void 0);
              posEndDataArray = emptyExportJson.lastIndexOf("]");
              firstJsonSlice = emptyExportJson.substring(0, posEndDataArray);
              slices.push(firstJsonSlice);
              filter = options.filter;
              transform = options.transform;
              _loop_1 = function(tableName2) {
                var table, primKey, inbound, LIMIT, emptyTableExport, emptyTableExportJson, posEndRowsArray, lastKey, lastNumRows, mayHaveMoreRows, _loop_2, state_1;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      table = db.table(tableName2);
                      primKey = table.schema.primKey;
                      inbound = !!primKey.keyPath;
                      LIMIT = options.numRowsPerChunk || DEFAULT_ROWS_PER_CHUNK;
                      emptyTableExport = inbound ? {
                        tableName: table.name,
                        inbound: true,
                        rows: []
                      } : {
                        tableName: table.name,
                        inbound: false,
                        rows: []
                      };
                      emptyTableExportJson = JSON.stringify(emptyTableExport, void 0, prettyJson ? 2 : void 0);
                      if (prettyJson) {
                        emptyTableExportJson = emptyTableExportJson.split("\n").join("\n    ");
                      }
                      posEndRowsArray = emptyTableExportJson.lastIndexOf("]");
                      slices.push(emptyTableExportJson.substring(0, posEndRowsArray));
                      lastKey = null;
                      lastNumRows = 0;
                      mayHaveMoreRows = true;
                      _loop_2 = function() {
                        var chunkedCollection, values, filteredValues, transformedValues, tsonValues, json, keys, keyvals, tsonTuples, json;
                        return __generator(this, function(_c) {
                          switch (_c.label) {
                            case 0:
                              if (progressCallback) {
                                import_wrapper_default.ignoreTransaction(function() {
                                  return progressCallback(progress);
                                });
                              }
                              chunkedCollection = lastKey == null ? table.limit(LIMIT) : table.where(":id").above(lastKey).limit(LIMIT);
                              return [4, chunkedCollection.toArray()];
                            case 1:
                              values = _c.sent();
                              if (values.length === 0)
                                return [2, "break"];
                              if (lastKey != null && lastNumRows > 0) {
                                slices.push(",");
                                if (prettyJson) {
                                  slices.push("\n      ");
                                }
                              }
                              mayHaveMoreRows = values.length === LIMIT;
                              if (!inbound) return [3, 4];
                              filteredValues = filter ? values.filter(function(value) {
                                return filter(tableName2, value);
                              }) : values;
                              transformedValues = transform ? filteredValues.map(function(value) {
                                return transform(tableName2, value).value;
                              }) : filteredValues;
                              tsonValues = transformedValues.map(function(value) {
                                return TSON.encapsulate(value);
                              });
                              if (!TSON.mustFinalize()) return [3, 3];
                              return [4, import_wrapper_default.waitFor(TSON.finalize(tsonValues))];
                            case 2:
                              _c.sent();
                              _c.label = 3;
                            case 3:
                              json = JSON.stringify(tsonValues, void 0, prettyJson ? 2 : void 0);
                              if (prettyJson)
                                json = json.split("\n").join("\n      ");
                              slices.push(new Blob([json.substring(1, json.length - 1)]));
                              lastNumRows = transformedValues.length;
                              lastKey = values.length > 0 ? import_wrapper_default.getByKeyPath(values[values.length - 1], primKey.keyPath) : null;
                              return [3, 8];
                            case 4:
                              return [4, chunkedCollection.primaryKeys()];
                            case 5:
                              keys = _c.sent();
                              keyvals = keys.map(function(key, i) {
                                return [key, values[i]];
                              });
                              if (filter)
                                keyvals = keyvals.filter(function(_a2) {
                                  var key = _a2[0], value = _a2[1];
                                  return filter(tableName2, value, key);
                                });
                              if (transform)
                                keyvals = keyvals.map(function(_a2) {
                                  var key = _a2[0], value = _a2[1];
                                  var transformResult = transform(tableName2, value, key);
                                  return [transformResult.key, transformResult.value];
                                });
                              tsonTuples = keyvals.map(function(tuple) {
                                return TSON.encapsulate(tuple);
                              });
                              if (!TSON.mustFinalize()) return [3, 7];
                              return [4, import_wrapper_default.waitFor(TSON.finalize(tsonTuples))];
                            case 6:
                              _c.sent();
                              _c.label = 7;
                            case 7:
                              json = JSON.stringify(tsonTuples, void 0, prettyJson ? 2 : void 0);
                              if (prettyJson)
                                json = json.split("\n").join("\n      ");
                              slices.push(new Blob([json.substring(1, json.length - 1)]));
                              lastNumRows = keyvals.length;
                              lastKey = keys.length > 0 ? keys[keys.length - 1] : null;
                              _c.label = 8;
                            case 8:
                              progress.completedRows += values.length;
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      };
                      _b.label = 1;
                    case 1:
                      if (!mayHaveMoreRows) return [3, 3];
                      return [5, _loop_2()];
                    case 2:
                      state_1 = _b.sent();
                      if (state_1 === "break")
                        return [3, 3];
                      return [3, 1];
                    case 3:
                      slices.push(emptyTableExportJson.substr(posEndRowsArray));
                      progress.completedTables += 1;
                      if (progress.completedTables < progress.totalTables) {
                        slices.push(",");
                      }
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              };
              _i = 0, tables_1 = tables;
              _a.label = 2;
            case 2:
              if (!(_i < tables_1.length)) return [3, 5];
              tableName = tables_1[_i].name;
              return [5, _loop_1(tableName)];
            case 3:
              _a.sent();
              _a.label = 4;
            case 4:
              _i++;
              return [3, 2];
            case 5:
              slices.push(emptyExportJson.substr(posEndDataArray));
              progress.done = true;
              if (progressCallback) {
                import_wrapper_default.ignoreTransaction(function() {
                  return progressCallback(progress);
                });
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    var skipTables, targetTables, slices, tables, prettyJson, emptyExport, progressCallback, progress;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          options = options || {};
          skipTables = options.skipTables ? options.skipTables : [];
          targetTables = db.tables.filter(function(x) {
            return !skipTables.includes(x.name);
          });
          slices = [];
          tables = targetTables.map(function(table) {
            return {
              name: table.name,
              schema: getSchemaString(table),
              rowCount: 0
            };
          });
          prettyJson = options.prettyJson;
          emptyExport = {
            formatName: "dexie",
            formatVersion: 1,
            data: {
              databaseName: db.name,
              databaseVersion: db.verno,
              tables,
              data: []
            }
          };
          progressCallback = options.progressCallback;
          progress = {
            done: false,
            completedRows: 0,
            completedTables: 0,
            totalRows: NaN,
            totalTables: tables.length
          };
          _a.label = 1;
        case 1:
          _a.trys.push([1, , 6, 7]);
          if (!options.noTransaction) return [3, 3];
          return [4, exportAll()];
        case 2:
          _a.sent();
          return [3, 5];
        case 3:
          return [4, db.transaction("r", db.tables, exportAll)];
        case 4:
          _a.sent();
          _a.label = 5;
        case 5:
          return [3, 7];
        case 6:
          TSON.finalize();
          return [
            7
            /*endfinally*/
          ];
        case 7:
          return [2, new Blob(slices, { type: "text/json" })];
      }
    });
  });
}
var VERSION = 1;
var fakeStream = { Stream: function() {
} };
var clarinet_1 = createCommonjsModule(function(module, exports) {
  (function(clarinet) {
    var env = typeof process === "object" && process.env ? process.env : self;
    clarinet.parser = function(opt) {
      return new CParser(opt);
    };
    clarinet.CParser = CParser;
    clarinet.CStream = CStream;
    clarinet.createStream = createStream;
    clarinet.MAX_BUFFER_LENGTH = 10 * 1024 * 1024;
    clarinet.DEBUG = env.CDEBUG === "debug";
    clarinet.INFO = env.CDEBUG === "debug" || env.CDEBUG === "info";
    clarinet.EVENTS = [
      "value",
      "string",
      "key",
      "openobject",
      "closeobject",
      "openarray",
      "closearray",
      "error",
      "end",
      "ready"
    ];
    var buffers = {
      textNode: void 0,
      numberNode: ""
    }, streamWraps = clarinet.EVENTS.filter(function(ev) {
      return ev !== "error" && ev !== "end";
    }), S = 0, Stream;
    clarinet.STATE = {
      BEGIN: S++,
      VALUE: S++,
      OPEN_OBJECT: S++,
      CLOSE_OBJECT: S++,
      OPEN_ARRAY: S++,
      CLOSE_ARRAY: S++,
      TEXT_ESCAPE: S++,
      STRING: S++,
      BACKSLASH: S++,
      END: S++,
      OPEN_KEY: S++,
      CLOSE_KEY: S++,
      TRUE: S++,
      TRUE2: S++,
      TRUE3: S++,
      FALSE: S++,
      FALSE2: S++,
      FALSE3: S++,
      FALSE4: S++,
      NULL: S++,
      NULL2: S++,
      NULL3: S++,
      NUMBER_DECIMAL_POINT: S++,
      NUMBER_DIGIT: S++
      // [0-9]
    };
    for (var s_ in clarinet.STATE) clarinet.STATE[clarinet.STATE[s_]] = s_;
    S = clarinet.STATE;
    const Char = {
      tab: 9,
      // \t
      lineFeed: 10,
      // \n
      carriageReturn: 13,
      // \r
      space: 32,
      // " "
      doubleQuote: 34,
      // "
      plus: 43,
      // +
      comma: 44,
      // ,
      minus: 45,
      // -
      period: 46,
      // .
      _0: 48,
      // 0
      _9: 57,
      // 9
      colon: 58,
      // :
      E: 69,
      // E
      openBracket: 91,
      // [
      backslash: 92,
      // \
      closeBracket: 93,
      // ]
      a: 97,
      // a
      b: 98,
      // b
      e: 101,
      // e 
      f: 102,
      // f
      l: 108,
      // l
      n: 110,
      // n
      r: 114,
      // r
      s: 115,
      // s
      t: 116,
      // t
      u: 117,
      // u
      openBrace: 123,
      // {
      closeBrace: 125
      // }
    };
    if (!Object.create) {
      Object.create = function(o) {
        function f() {
          this["__proto__"] = o;
        }
        f.prototype = o;
        return new f();
      };
    }
    if (!Object.getPrototypeOf) {
      Object.getPrototypeOf = function(o) {
        return o["__proto__"];
      };
    }
    if (!Object.keys) {
      Object.keys = function(o) {
        var a = [];
        for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
        return a;
      };
    }
    function checkBufferLength(parser) {
      var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10), maxActual = 0;
      for (var buffer in buffers) {
        var len = parser[buffer] === void 0 ? 0 : parser[buffer].length;
        if (len > maxAllowed) {
          switch (buffer) {
            case "text":
              closeText(parser);
              break;
            default:
              error(parser, "Max buffer length exceeded: " + buffer);
          }
        }
        maxActual = Math.max(maxActual, len);
      }
      parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH - maxActual + parser.position;
    }
    function clearBuffers(parser) {
      for (var buffer in buffers) {
        parser[buffer] = buffers[buffer];
      }
    }
    var stringTokenPattern = /[\\"\n]/g;
    function CParser(opt) {
      if (!(this instanceof CParser)) return new CParser(opt);
      var parser = this;
      clearBuffers(parser);
      parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;
      parser.q = parser.c = parser.p = "";
      parser.opt = opt || {};
      parser.closed = parser.closedRoot = parser.sawRoot = false;
      parser.tag = parser.error = null;
      parser.state = S.BEGIN;
      parser.stack = new Array();
      parser.position = parser.column = 0;
      parser.line = 1;
      parser.slashed = false;
      parser.unicodeI = 0;
      parser.unicodeS = null;
      parser.depth = 0;
      emit(parser, "onready");
    }
    CParser.prototype = {
      end: function() {
        end(this);
      },
      write,
      resume: function() {
        this.error = null;
        return this;
      },
      close: function() {
        return this.write(null);
      }
    };
    try {
      Stream = fakeStream.Stream;
    } catch (ex) {
      Stream = function() {
      };
    }
    function createStream(opt) {
      return new CStream(opt);
    }
    function CStream(opt) {
      if (!(this instanceof CStream)) return new CStream(opt);
      this._parser = new CParser(opt);
      this.writable = true;
      this.readable = true;
      this.bytes_remaining = 0;
      this.bytes_in_sequence = 0;
      this.temp_buffs = { "2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4) };
      this.string = "";
      var me = this;
      Stream.apply(me);
      this._parser.onend = function() {
        me.emit("end");
      };
      this._parser.onerror = function(er) {
        me.emit("error", er);
        me._parser.error = null;
      };
      streamWraps.forEach(function(ev) {
        Object.defineProperty(
          me,
          "on" + ev,
          {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h;
                return h;
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          }
        );
      });
    }
    CStream.prototype = Object.create(
      Stream.prototype,
      { constructor: { value: CStream } }
    );
    CStream.prototype.write = function(data) {
      data = new Buffer(data);
      for (var i = 0; i < data.length; i++) {
        var n = data[i];
        if (this.bytes_remaining > 0) {
          for (var j = 0; j < this.bytes_remaining; j++) {
            this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = data[j];
          }
          this.string = this.temp_buffs[this.bytes_in_sequence].toString();
          this.bytes_in_sequence = this.bytes_remaining = 0;
          i = i + j - 1;
          this._parser.write(this.string);
          this.emit("data", this.string);
          continue;
        }
        if (this.bytes_remaining === 0 && n >= 128) {
          if (n >= 194 && n <= 223) this.bytes_in_sequence = 2;
          if (n >= 224 && n <= 239) this.bytes_in_sequence = 3;
          if (n >= 240 && n <= 244) this.bytes_in_sequence = 4;
          if (this.bytes_in_sequence + i > data.length) {
            for (var k = 0; k <= data.length - 1 - i; k++) {
              this.temp_buffs[this.bytes_in_sequence][k] = data[i + k];
            }
            this.bytes_remaining = i + this.bytes_in_sequence - data.length;
            return true;
          } else {
            this.string = data.slice(i, i + this.bytes_in_sequence).toString();
            i = i + this.bytes_in_sequence - 1;
            this._parser.write(this.string);
            this.emit("data", this.string);
            continue;
          }
        }
        for (var p = i; p < data.length; p++) {
          if (data[p] >= 128) break;
        }
        this.string = data.slice(i, p).toString();
        this._parser.write(this.string);
        this.emit("data", this.string);
        i = p - 1;
        continue;
      }
    };
    CStream.prototype.end = function(chunk) {
      if (chunk && chunk.length) this._parser.write(chunk.toString());
      this._parser.end();
      return true;
    };
    CStream.prototype.on = function(ev, handler) {
      var me = this;
      if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
        me._parser["on" + ev] = function() {
          var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
          args.splice(0, 0, ev);
          me.emit.apply(me, args);
        };
      }
      return Stream.prototype.on.call(me, ev, handler);
    };
    CStream.prototype.destroy = function() {
      clearBuffers(this._parser);
      this.emit("close");
    };
    function emit(parser, event, data) {
      if (clarinet.INFO) console.log("-- emit", event, data);
      if (parser[event]) parser[event](data);
    }
    function emitNode(parser, event, data) {
      closeValue(parser);
      emit(parser, event, data);
    }
    function closeValue(parser, event) {
      parser.textNode = textopts(parser.opt, parser.textNode);
      if (parser.textNode !== void 0) {
        emit(parser, event ? event : "onvalue", parser.textNode);
      }
      parser.textNode = void 0;
    }
    function closeNumber(parser) {
      if (parser.numberNode)
        emit(parser, "onvalue", parseFloat(parser.numberNode));
      parser.numberNode = "";
    }
    function textopts(opt, text) {
      if (text === void 0) {
        return text;
      }
      if (opt.trim) text = text.trim();
      if (opt.normalize) text = text.replace(/\s+/g, " ");
      return text;
    }
    function error(parser, er) {
      closeValue(parser);
      er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
      er = new Error(er);
      parser.error = er;
      emit(parser, "onerror", er);
      return parser;
    }
    function end(parser) {
      if (parser.state !== S.VALUE || parser.depth !== 0)
        error(parser, "Unexpected end");
      closeValue(parser);
      parser.c = "";
      parser.closed = true;
      emit(parser, "onend");
      CParser.call(parser, parser.opt);
      return parser;
    }
    function isWhitespace(c) {
      return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;
    }
    function write(chunk) {
      var parser = this;
      if (this.error) throw this.error;
      if (parser.closed) return error(
        parser,
        "Cannot write after close. Assign an onready handler."
      );
      if (chunk === null) return end(parser);
      var i = 0, c = chunk.charCodeAt(0), p = parser.p;
      if (clarinet.DEBUG) console.log("write -> [" + chunk + "]");
      while (c) {
        p = c;
        parser.c = c = chunk.charCodeAt(i++);
        if (p !== c) parser.p = p;
        else p = parser.p;
        if (!c) break;
        if (clarinet.DEBUG) console.log(i, c, clarinet.STATE[parser.state]);
        parser.position++;
        if (c === Char.lineFeed) {
          parser.line++;
          parser.column = 0;
        } else parser.column++;
        switch (parser.state) {
          case S.BEGIN:
            if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;
            else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;
            else if (!isWhitespace(c))
              error(parser, "Non-whitespace before {[.");
            continue;
          case S.OPEN_KEY:
          case S.OPEN_OBJECT:
            if (isWhitespace(c)) continue;
            if (parser.state === S.OPEN_KEY) parser.stack.push(S.CLOSE_KEY);
            else {
              if (c === Char.closeBrace) {
                emit(parser, "onopenobject");
                this.depth++;
                emit(parser, "oncloseobject");
                this.depth--;
                parser.state = parser.stack.pop() || S.VALUE;
                continue;
              } else parser.stack.push(S.CLOSE_OBJECT);
            }
            if (c === Char.doubleQuote) parser.state = S.STRING;
            else error(parser, 'Malformed object key should start with "');
            continue;
          case S.CLOSE_KEY:
          case S.CLOSE_OBJECT:
            if (isWhitespace(c)) continue;
            parser.state === S.CLOSE_KEY ? "key" : "object";
            if (c === Char.colon) {
              if (parser.state === S.CLOSE_OBJECT) {
                parser.stack.push(S.CLOSE_OBJECT);
                closeValue(parser, "onopenobject");
                this.depth++;
              } else closeValue(parser, "onkey");
              parser.state = S.VALUE;
            } else if (c === Char.closeBrace) {
              emitNode(parser, "oncloseobject");
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
            } else if (c === Char.comma) {
              if (parser.state === S.CLOSE_OBJECT)
                parser.stack.push(S.CLOSE_OBJECT);
              closeValue(parser);
              parser.state = S.OPEN_KEY;
            } else error(parser, "Bad object");
            continue;
          case S.OPEN_ARRAY:
          case S.VALUE:
            if (isWhitespace(c)) continue;
            if (parser.state === S.OPEN_ARRAY) {
              emit(parser, "onopenarray");
              this.depth++;
              parser.state = S.VALUE;
              if (c === Char.closeBracket) {
                emit(parser, "onclosearray");
                this.depth--;
                parser.state = parser.stack.pop() || S.VALUE;
                continue;
              } else {
                parser.stack.push(S.CLOSE_ARRAY);
              }
            }
            if (c === Char.doubleQuote) parser.state = S.STRING;
            else if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;
            else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;
            else if (c === Char.t) parser.state = S.TRUE;
            else if (c === Char.f) parser.state = S.FALSE;
            else if (c === Char.n) parser.state = S.NULL;
            else if (c === Char.minus) {
              parser.numberNode += "-";
            } else if (Char._0 <= c && c <= Char._9) {
              parser.numberNode += String.fromCharCode(c);
              parser.state = S.NUMBER_DIGIT;
            } else error(parser, "Bad value");
            continue;
          case S.CLOSE_ARRAY:
            if (c === Char.comma) {
              parser.stack.push(S.CLOSE_ARRAY);
              closeValue(parser, "onvalue");
              parser.state = S.VALUE;
            } else if (c === Char.closeBracket) {
              emitNode(parser, "onclosearray");
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
            } else if (isWhitespace(c))
              continue;
            else error(parser, "Bad array");
            continue;
          case S.STRING:
            if (parser.textNode === void 0) {
              parser.textNode = "";
            }
            var starti = i - 1, slashed = parser.slashed, unicodeI = parser.unicodeI;
            STRING_BIGLOOP: while (true) {
              if (clarinet.DEBUG)
                console.log(
                  i,
                  c,
                  clarinet.STATE[parser.state],
                  slashed
                );
              while (unicodeI > 0) {
                parser.unicodeS += String.fromCharCode(c);
                c = chunk.charCodeAt(i++);
                parser.position++;
                if (unicodeI === 4) {
                  parser.textNode += String.fromCharCode(parseInt(parser.unicodeS, 16));
                  unicodeI = 0;
                  starti = i - 1;
                } else {
                  unicodeI++;
                }
                if (!c) break STRING_BIGLOOP;
              }
              if (c === Char.doubleQuote && !slashed) {
                parser.state = parser.stack.pop() || S.VALUE;
                parser.textNode += chunk.substring(starti, i - 1);
                parser.position += i - 1 - starti;
                break;
              }
              if (c === Char.backslash && !slashed) {
                slashed = true;
                parser.textNode += chunk.substring(starti, i - 1);
                parser.position += i - 1 - starti;
                c = chunk.charCodeAt(i++);
                parser.position++;
                if (!c) break;
              }
              if (slashed) {
                slashed = false;
                if (c === Char.n) {
                  parser.textNode += "\n";
                } else if (c === Char.r) {
                  parser.textNode += "\r";
                } else if (c === Char.t) {
                  parser.textNode += "	";
                } else if (c === Char.f) {
                  parser.textNode += "\f";
                } else if (c === Char.b) {
                  parser.textNode += "\b";
                } else if (c === Char.u) {
                  unicodeI = 1;
                  parser.unicodeS = "";
                } else {
                  parser.textNode += String.fromCharCode(c);
                }
                c = chunk.charCodeAt(i++);
                parser.position++;
                starti = i - 1;
                if (!c) break;
                else continue;
              }
              stringTokenPattern.lastIndex = i;
              var reResult = stringTokenPattern.exec(chunk);
              if (reResult === null) {
                i = chunk.length + 1;
                parser.textNode += chunk.substring(starti, i - 1);
                parser.position += i - 1 - starti;
                break;
              }
              i = reResult.index + 1;
              c = chunk.charCodeAt(reResult.index);
              if (!c) {
                parser.textNode += chunk.substring(starti, i - 1);
                parser.position += i - 1 - starti;
                break;
              }
            }
            parser.slashed = slashed;
            parser.unicodeI = unicodeI;
            continue;
          case S.TRUE:
            if (c === Char.r) parser.state = S.TRUE2;
            else error(parser, "Invalid true started with t" + c);
            continue;
          case S.TRUE2:
            if (c === Char.u) parser.state = S.TRUE3;
            else error(parser, "Invalid true started with tr" + c);
            continue;
          case S.TRUE3:
            if (c === Char.e) {
              emit(parser, "onvalue", true);
              parser.state = parser.stack.pop() || S.VALUE;
            } else error(parser, "Invalid true started with tru" + c);
            continue;
          case S.FALSE:
            if (c === Char.a) parser.state = S.FALSE2;
            else error(parser, "Invalid false started with f" + c);
            continue;
          case S.FALSE2:
            if (c === Char.l) parser.state = S.FALSE3;
            else error(parser, "Invalid false started with fa" + c);
            continue;
          case S.FALSE3:
            if (c === Char.s) parser.state = S.FALSE4;
            else error(parser, "Invalid false started with fal" + c);
            continue;
          case S.FALSE4:
            if (c === Char.e) {
              emit(parser, "onvalue", false);
              parser.state = parser.stack.pop() || S.VALUE;
            } else error(parser, "Invalid false started with fals" + c);
            continue;
          case S.NULL:
            if (c === Char.u) parser.state = S.NULL2;
            else error(parser, "Invalid null started with n" + c);
            continue;
          case S.NULL2:
            if (c === Char.l) parser.state = S.NULL3;
            else error(parser, "Invalid null started with nu" + c);
            continue;
          case S.NULL3:
            if (c === Char.l) {
              emit(parser, "onvalue", null);
              parser.state = parser.stack.pop() || S.VALUE;
            } else error(parser, "Invalid null started with nul" + c);
            continue;
          case S.NUMBER_DECIMAL_POINT:
            if (c === Char.period) {
              parser.numberNode += ".";
              parser.state = S.NUMBER_DIGIT;
            } else error(parser, "Leading zero not followed by .");
            continue;
          case S.NUMBER_DIGIT:
            if (Char._0 <= c && c <= Char._9) parser.numberNode += String.fromCharCode(c);
            else if (c === Char.period) {
              if (parser.numberNode.indexOf(".") !== -1)
                error(parser, "Invalid number has two dots");
              parser.numberNode += ".";
            } else if (c === Char.e || c === Char.E) {
              if (parser.numberNode.indexOf("e") !== -1 || parser.numberNode.indexOf("E") !== -1)
                error(parser, "Invalid number has two exponential");
              parser.numberNode += "e";
            } else if (c === Char.plus || c === Char.minus) {
              if (!(p === Char.e || p === Char.E))
                error(parser, "Invalid symbol in number");
              parser.numberNode += String.fromCharCode(c);
            } else {
              closeNumber(parser);
              i--;
              parser.state = parser.stack.pop() || S.VALUE;
            }
            continue;
          default:
            error(parser, "Unknown state: " + parser.state);
        }
      }
      if (parser.position >= parser.bufferCheckPosition)
        checkBufferLength(parser);
      return parser;
    }
  })(exports);
});
function JsonStream(blob) {
  var pos = 0;
  var parser = JsonParser(true);
  var rv = {
    pullAsync: function(numBytes) {
      return __awaiter(this, void 0, void 0, function() {
        var slize, jsonPart, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              slize = blob.slice(pos, pos + numBytes);
              pos += numBytes;
              return [4, readBlobAsync(slize, "text")];
            case 1:
              jsonPart = _a.sent();
              result = parser.write(jsonPart);
              rv.result = result || {};
              return [2, result];
          }
        });
      });
    },
    pullSync: function(numBytes) {
      var slize = blob.slice(pos, pos + numBytes);
      pos += numBytes;
      var jsonPart = readBlobSync(slize, "text");
      var result = parser.write(jsonPart);
      rv.result = result || {};
      return result;
    },
    done: function() {
      return parser.done();
    },
    eof: function() {
      return pos >= blob.size;
    },
    result: {}
  };
  return rv;
}
function JsonParser(allowPartial) {
  var parser = clarinet_1.parser();
  var level = 0;
  var result;
  var stack = [];
  var obj;
  var key;
  var done = false;
  var array = false;
  parser.onopenobject = function(newKey) {
    var newObj = {};
    newObj.incomplete = true;
    if (!result)
      result = newObj;
    if (obj) {
      stack.push([key, obj, array]);
      if (allowPartial) {
        if (array) {
          obj.push(newObj);
        } else {
          obj[key] = newObj;
        }
      }
    }
    obj = newObj;
    key = newKey;
    array = false;
    ++level;
  };
  parser.onkey = function(newKey) {
    return key = newKey;
  };
  parser.onvalue = function(value) {
    return array ? obj.push(value) : obj[key] = value;
  };
  parser.oncloseobject = function() {
    var _a;
    delete obj.incomplete;
    key = null;
    if (--level === 0) {
      done = true;
    } else {
      var completedObj = obj;
      _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
      if (!allowPartial) {
        if (array) {
          obj.push(completedObj);
        } else {
          obj[key] = completedObj;
        }
      }
    }
  };
  parser.onopenarray = function() {
    var newObj = [];
    newObj.incomplete = true;
    if (!result)
      result = newObj;
    if (obj) {
      stack.push([key, obj, array]);
      if (allowPartial) {
        if (array) {
          obj.push(newObj);
        } else {
          obj[key] = newObj;
        }
      }
    }
    obj = newObj;
    array = true;
    key = null;
    ++level;
  };
  parser.onclosearray = function() {
    var _a;
    delete obj.incomplete;
    key = null;
    if (--level === 0) {
      done = true;
    } else {
      var completedObj = obj;
      _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
      if (!allowPartial) {
        if (array) {
          obj.push(completedObj);
        } else {
          obj[key] = completedObj;
        }
      }
    }
  };
  return {
    write: function(jsonPart) {
      parser.write(jsonPart);
      return result;
    },
    done: function() {
      return done;
    }
  };
}
var DEFAULT_KILOBYTES_PER_CHUNK = 1024;
function importDB(exportedData, options) {
  return __awaiter(this, void 0, void 0, function() {
    var CHUNK_SIZE, stream, dbExport, db;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          options = options || {};
          CHUNK_SIZE = options.chunkSizeBytes || DEFAULT_KILOBYTES_PER_CHUNK * 1024;
          return [4, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
        case 1:
          stream = _a.sent();
          dbExport = stream.result.data;
          db = new import_wrapper_default(dbExport.databaseName);
          db.version(dbExport.databaseVersion).stores(extractDbSchema(dbExport));
          return [4, importInto(db, stream, options)];
        case 2:
          _a.sent();
          return [2, db];
      }
    });
  });
}
function peakImportFile(exportedData) {
  return __awaiter(this, void 0, void 0, function() {
    var stream;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          stream = JsonStream(exportedData);
          _a.label = 1;
        case 1:
          if (!!stream.eof()) return [3, 3];
          return [4, stream.pullAsync(5 * 1024)];
        case 2:
          _a.sent();
          if (stream.result.data && stream.result.data.data) {
            delete stream.result.data.data;
            return [3, 3];
          }
          return [3, 1];
        case 3:
          return [2, stream.result];
      }
    });
  });
}
function importInto(db, exportedData, options) {
  return __awaiter(this, void 0, void 0, function() {
    function importAll() {
      return __awaiter(this, void 0, void 0, function() {
        var _loop_1, _i2, _a2, tableExport, state_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _loop_1 = function(tableExport2) {
                var tableName, table2, tableSchemaStr, sourceRows, rows, i, obj, filter, transform, filteredRows, _c, keys, values;
                return __generator(this, function(_d) {
                  switch (_d.label) {
                    case 0:
                      if (skipTables.includes(tableExport2.tableName))
                        return [2, "continue"];
                      if (!tableExport2.rows)
                        return [2, "break"];
                      if (!tableExport2.rows.incomplete && tableExport2.rows.length === 0)
                        return [2, "continue"];
                      if (progressCallback) {
                        import_wrapper_default.ignoreTransaction(function() {
                          return progressCallback(progress);
                        });
                      }
                      tableName = tableExport2.tableName;
                      table2 = db.table(tableName);
                      tableSchemaStr = dbExport.tables.filter(function(t) {
                        return t.name === tableName;
                      })[0].schema;
                      if (!table2) {
                        if (!options.acceptMissingTables)
                          throw new Error("Exported table ".concat(tableExport2.tableName, " is missing in installed database"));
                        else
                          return [2, "continue"];
                      }
                      if (!options.acceptChangedPrimaryKey && tableSchemaStr.split(",")[0] != table2.schema.primKey.src) {
                        throw new Error("Primary key differs for table ".concat(tableExport2.tableName, ". "));
                      }
                      sourceRows = tableExport2.rows;
                      rows = [];
                      for (i = 0; i < sourceRows.length; i++) {
                        obj = sourceRows[i];
                        if (!obj.incomplete) {
                          rows.push(TSON.revive(obj));
                        } else {
                          break;
                        }
                      }
                      filter = options.filter;
                      transform = options.transform;
                      filteredRows = filter ? tableExport2.inbound ? rows.filter(function(value) {
                        return filter(tableName, value);
                      }) : rows.filter(function(_a3) {
                        var key = _a3[0], value = _a3[1];
                        return filter(tableName, value, key);
                      }) : rows;
                      if (transform) {
                        filteredRows = filteredRows.map(tableExport2.inbound ? function(value) {
                          return transform(tableName, value).value;
                        } : function(_a3) {
                          var key = _a3[0], value = _a3[1];
                          var res = transform(tableName, value, key);
                          return [res.key, res.value];
                        });
                      }
                      _c = tableExport2.inbound ? [void 0, filteredRows] : [filteredRows.map(function(row) {
                        return row[0];
                      }), rows.map(function(row) {
                        return row[1];
                      })], keys = _c[0], values = _c[1];
                      if (!options.overwriteValues) return [3, 2];
                      return [4, table2.bulkPut(values, keys)];
                    case 1:
                      _d.sent();
                      return [3, 4];
                    case 2:
                      return [4, table2.bulkAdd(values, keys)];
                    case 3:
                      _d.sent();
                      _d.label = 4;
                    case 4:
                      progress.completedRows += rows.length;
                      if (!rows.incomplete) {
                        progress.completedTables += 1;
                      }
                      sourceRows.splice(0, rows.length);
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              };
              _i2 = 0, _a2 = dbExport.data;
              _b.label = 1;
            case 1:
              if (!(_i2 < _a2.length)) return [3, 4];
              tableExport = _a2[_i2];
              return [5, _loop_1(tableExport)];
            case 2:
              state_1 = _b.sent();
              if (state_1 === "break")
                return [3, 4];
              _b.label = 3;
            case 3:
              _i2++;
              return [3, 1];
            case 4:
              while (dbExport.data.length > 0 && dbExport.data[0].rows && !dbExport.data[0].rows.incomplete) {
                dbExport.data.splice(0, 1);
              }
              if (!(!jsonStream.done() && !jsonStream.eof())) return [3, 8];
              if (!readBlobsSynchronously2) return [3, 5];
              jsonStream.pullSync(CHUNK_SIZE);
              return [3, 7];
            case 5:
              return [4, import_wrapper_default.waitFor(jsonStream.pullAsync(CHUNK_SIZE))];
            case 6:
              _b.sent();
              _b.label = 7;
            case 7:
              return [3, 9];
            case 8:
              return [3, 10];
            case 9:
              return [3, 0];
            case 10:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    var CHUNK_SIZE, jsonStream, dbExportFile, readBlobsSynchronously2, dbExport, skipTables, progressCallback, progress, _i, _a, table;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          options = options || {};
          CHUNK_SIZE = options.chunkSizeBytes || DEFAULT_KILOBYTES_PER_CHUNK * 1024;
          return [4, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
        case 1:
          jsonStream = _b.sent();
          dbExportFile = jsonStream.result;
          readBlobsSynchronously2 = "FileReaderSync" in self;
          dbExport = dbExportFile.data;
          skipTables = options.skipTables ? options.skipTables : [];
          if (!options.acceptNameDiff && db.name !== dbExport.databaseName)
            throw new Error("Name differs. Current database name is ".concat(db.name, " but export is ").concat(dbExport.databaseName));
          if (!options.acceptVersionDiff && db.verno !== dbExport.databaseVersion) {
            throw new Error("Database version differs. Current database is in version ".concat(db.verno, " but export is ").concat(dbExport.databaseVersion));
          }
          progressCallback = options.progressCallback;
          progress = {
            done: false,
            completedRows: 0,
            completedTables: 0,
            totalRows: dbExport.tables.reduce(function(p, c) {
              return p + c.rowCount;
            }, 0),
            totalTables: dbExport.tables.length
          };
          if (progressCallback) {
            import_wrapper_default.ignoreTransaction(function() {
              return progressCallback(progress);
            });
          }
          if (!options.clearTablesBeforeImport) return [3, 5];
          _i = 0, _a = db.tables;
          _b.label = 2;
        case 2:
          if (!(_i < _a.length)) return [3, 5];
          table = _a[_i];
          if (skipTables.includes(table.name))
            return [3, 4];
          return [4, table.clear()];
        case 3:
          _b.sent();
          _b.label = 4;
        case 4:
          _i++;
          return [3, 2];
        case 5:
          if (!options.noTransaction) return [3, 7];
          return [4, importAll()];
        case 6:
          _b.sent();
          return [3, 9];
        case 7:
          return [4, db.transaction("rw", db.tables, importAll)];
        case 8:
          _b.sent();
          _b.label = 9;
        case 9:
          progress.done = true;
          if (progressCallback) {
            import_wrapper_default.ignoreTransaction(function() {
              return progressCallback(progress);
            });
          }
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE) {
  return __awaiter(this, void 0, void 0, function() {
    var stream, dbExportFile;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          stream = "slice" in exportedData ? JsonStream(exportedData) : exportedData;
          _a.label = 1;
        case 1:
          if (!!stream.eof()) return [3, 3];
          return [4, stream.pullAsync(CHUNK_SIZE)];
        case 2:
          _a.sent();
          if (stream.result.data && stream.result.data.data)
            return [3, 3];
          return [3, 1];
        case 3:
          dbExportFile = stream.result;
          if (!dbExportFile || dbExportFile.formatName != "dexie")
            throw new Error("Given file is not a dexie export");
          if (dbExportFile.formatVersion > VERSION) {
            throw new Error("Format version ".concat(dbExportFile.formatVersion, " not supported"));
          }
          if (!dbExportFile.data) {
            throw new Error("No data in export file");
          }
          if (!dbExportFile.data.databaseName) {
            throw new Error("Missing databaseName in export file");
          }
          if (!dbExportFile.data.databaseVersion) {
            throw new Error("Missing databaseVersion in export file");
          }
          if (!dbExportFile.data.tables) {
            throw new Error("Missing tables in export file");
          }
          return [2, stream];
      }
    });
  });
}
import_wrapper_default.prototype.export = function(options) {
  return exportDB(this, options);
};
import_wrapper_default.prototype.import = function(blob, options) {
  return importInto(this, blob, options);
};
import_wrapper_default.import = function(blob, options) {
  return importDB(blob, options);
};
var dexieExportImport = function() {
  throw new Error("This addon extends Dexie.prototype globally and does not have be included in Dexie constructor's addons options.");
};
export {
  dexieExportImport as default,
  exportDB,
  importDB,
  importInto,
  peakImportFile
};
/*! Bundled license information:

dexie-export-import/dist/dexie-export-import.mjs:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=dexie-export-import.js.map
